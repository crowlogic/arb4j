
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}


group = 'org.arblib'
version = '0.99.9.1'
description = 'arb4j'
java.sourceCompatibility = JavaVersion.VERSION_24

javafx {
    version = "24.0.1" 
    modules = [ 'javafx.swing', 'javafx.controls', 'javafx.fxml', 'javafx.graphics' ]  
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = uri('https://jitpack.io') }
    maven { url = uri('https://oss.sonatype.org/content/repositories/releases') }
    maven { url = uri('https://raw.github.com/SpinyOwl/repo/releases') }
    maven { url = uri('https://maven.jzy3d.org/releases/') }
    maven { url = uri('https://amelentev.github.io/mvnrepo/') }
    maven { url = uri('https://repo.maven.apache.org/maven2/') }
    maven { url = uri('https://download.oracle.com/maven') }
}

dependencies {
    api 'guru.nidi:graphviz-java:0.18.1'
    api 'io.github.mkpaz:atlantafx-base:2.0.1'
    api 'org.fxyz3d:fxyz3d:0.6.0'
    api 'com.github.beosign:snakeyaml-anno:1.3.0'
    api 'org.yaml:snakeyaml:2.4'
    api 'org.ow2.asm:asm:9.8'
    api 'org.ow2.asm:asm-commons:9.8'
    api 'org.ow2.asm:asm-util:9.8'
    api 'org.openjfx:javafx-base:24.0.1'
    api 'org.openjfx:javafx-swing:24.0.1'
    api 'org.openjfx:javafx-fxml:24.0.1'
    api 'org.slf4j:slf4j-simple:2.0.17'
    api 'org.scilab.forge:jlatexmath:1.0.7'
    api 'io.fair-acc:chartfx:11.3.1'
    api 'org.controlsfx:controlsfx:11.2.2'
    api 'junit:junit:4.13.2'
    api 'guru.nidi.com.kitfox:svgSalamander:1.1.3'    
}

configurations.all {
    exclude group: 'org.apache.commons', module: 'commons-math3'
}


task createDesktopFile {
    doLast {
        def desktopFile = new File("${buildDir}/Expressor.desktop")
        desktopFile.text = """[Desktop Entry]
Type=Application
Name=Expressor
Exec=${projectDir}/bin/expressor
Icon=${projectDir}/src/main/resources/ExpressionAnalyzer.png
Terminal=false
Categories=Utility;
"""
    }
    doLast {
        def desktopFile = new File("${buildDir}/TODO.desktop")
        desktopFile.text = """[Desktop Entry]
Type=Application
Name=TODO
Exec=${projectDir}/bin/todo
Icon=${projectDir}/src/main/resources/TODO.png
Terminal=false
Categories=Utility;
"""
    }   
    doLast {
        def desktopFile = new File("${buildDir}/SymbolPalette.desktop")
        desktopFile.text = """[Desktop Entry]
Type=Application
Name=Symbol Palette
Exec=${projectDir}/bin/symbolPalette
Icon=${projectDir}/src/main/resources/SymbolPalette.png
Terminal=false
Categories=Utility;
"""
    }  
}

task installDesktopFile(type: Copy) {
    dependsOn createDesktopFile
    from "${buildDir}/Expressor.desktop"
    from "${buildDir}/TODO.desktop"
    from "${buildDir}/SymbolPalette.desktop"
    into "${System.getProperty('user.home')}/.local/share/applications"
}

build.finalizedBy createDesktopFile
build.finalizedBy installDesktopFile

tasks.withType(Javadoc) {
    options.addStringOption('source', '24') 
    options.addBooleanOption('-enable-preview', true)
    options.addBooleanOption('Xdoclint:none', true) 
    options.addBooleanOption('quiet', true)         
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE;
     from('src/main/resources') {
        include '**/*'
    }
}

java {
    withSourcesJar()
    modularity.inferModulePath.set(true)
        withJavadocJar()  // This will create the javadoc jar properly
  
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java  // This will automatically include main jar, sources jar, and javadoc jar
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['--enable-preview']
    options.fork = true
    options.forkOptions.jvmArgs += ['-ea', '--enable-preview']
}


tasks.test {
    jvmArgs '-ea', '--enable-preview', '--enable-native-access=ALL-UNNAMED', '-Djava.library.path=.'
}

task createClasspathManifest {
    doLast {
        def classpathEntries = configurations.runtimeClasspath.collect { it.getAbsolutePath() }.join(':')
        def manifestFile = file('class.path')
        manifestFile.text = "${classpathEntries}\n"
    }
}

tasks.build.dependsOn createClasspathManifest

processResources {
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE;
   from('src/main/resources') {
        include '**/*'
    }
    into 'bin/main'
}


sourceSets {
    main {
        java.destinationDirectory.set(file('bin/main'))
        output.resourcesDir = file('bin/main')
    }
    test {
        java.destinationDirectory.set(file('bin/test'))
        output.resourcesDir = file('bin/test')
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}
