/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package arb;

import static arb.RealConstants.*;

public class RealMatrix implements AutoCloseable {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public RealMatrix(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(RealMatrix obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        arbJNI.delete_RealMatrix(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  /**
   * Calls {@link arb#arb_mat_clear(RealMatrix)}
   * @return this
   */
  public RealMatrix clear()
  {
    if ( swigCMemOwn )
    {      
      arb.arb_mat_clear(this);
    }
    return this;
  }

  @Override
  public void close()
  { 
      clear();
  }
  
  
  public RealMatrix init(int rows, int cols)
  {
    arb.arb_mat_init(this, rows, cols);
    return this;
  } 


  /**
   * Computes the Cholesky decomposition of A. Returning the factor matrix iff the
   * symmetric matrix defined by the lower triangular part of this is certainly
   * positive definite then the result is set to the lower triangular matrix such
   * that this=result*conjugateTranspose(result)
   * 
   * @param prec
   * @param result
   * @return null if {@link arb#arb_mat_cho(RealMatrix, RealMatrix, int)} returned
   *         0 indicating either the matrix is not symmetric positive definite,
   *         the input matrix was computed to insufficient precision, or the
   *         decomposition was attempted at insufficient precision 0
   */
  public RealMatrix chol(int prec, RealMatrix result)
  {
    if (arb.arb_mat_cho(result, this, prec) == 0)
    {
      return null;
    }
    else
    {
      return result;
    }
  }
  
    
      

  public void setEntries(Real value) {
    arbJNI.RealMatrix_entries_set(swigCPtr, this, Real.getCPtr(value), value);
  }

  public Real getEntries() {
    long cPtr = arbJNI.RealMatrix_entries_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Real(cPtr, false);
  }

  public void setR(int value) {
    arbJNI.RealMatrix_r_set(swigCPtr, this, value);
  }

  public int getR() {
    return arbJNI.RealMatrix_r_get(swigCPtr, this);
  }

  public void setC(int value) {
    arbJNI.RealMatrix_c_set(swigCPtr, this, value);
  }

  public int getC() {
    return arbJNI.RealMatrix_c_get(swigCPtr, this);
  }

  public RealMatrix() {
    this(arbJNI.new_RealMatrix(), true);
  }

}
