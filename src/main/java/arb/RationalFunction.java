/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package arb;

import arb.functions.Function;
import arb.exceptions.ArbException;
import arb.expressions.Context;

public class RationalFunction implements Named,AutoCloseable,Field<RationalFunction>,Function<Fraction,Fraction>,Verifiable {
  protected long swigCPtr;
  protected boolean swigCMemOwn;

  public RationalFunction(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(RationalFunction obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        arblibJNI.delete_RationalFunction(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  
  @Override
  public boolean verify()
  {
    boolean denominatorConsistent = denominator == null || denominator.swigCPtr == getDenominatorAddress();
    boolean numeratorConsistent   = numerator == null || numerator.swigCPtr == getNumeratorAddress();
    return denominatorConsistent && numeratorConsistent;
  }
  
  @SuppressWarnings("resource")
  public RationalFunction pow(Integer power, int unused, RationalFunction res)
  {
    assert power != null && power.swigCPtr != 0 : "null pointer or reference";
    RationalFunction thiz = this;
    if ( power.getSignedValue() < 0 )
    {
      arblib.fmpz_poly_q_inv(thiz = res, this);
    }
    arblib.fmpz_poly_q_pow(res, thiz, power.getUnsignedValue() );
    return res;
  }
  
  @Override
  public Fraction evaluate(Fraction t, int order, int bits, Fraction res)
  {
    arblib.fmpz_poly_q_evaluate_fmpq(res, this, t);
    return res;
  }
  
  static
  {
    System.loadLibrary("arblib");
  }

  @Override
  public boolean equals(Object obj)
  {
    if ( !(obj instanceof RationalFunction))
    {
      return false;
    }
    RationalFunction that = (RationalFunction)obj;
    return arblib.fmpz_poly_q_equal(this, that) != 0;
  }
  
  public RationalFunction init()
  {
    arblib.fmpz_poly_q_init(this);
    return this;    
  }
  
  public RationalFunction set(int i)
  {
    arblib.fmpz_poly_q_set_si(this, i);
    return this;
  }
  
  public IntegerPolynomial numerator;
 
  public IntegerPolynomial denominator;

  public IntegerPolynomial getDenominator()
  {
    if (denominator == null)
    {
      denominator = new IntegerPolynomial(getDenominatorAddress(),
                                          false);
    }
    else
    {
      denominator.swigCPtr = getDenominatorAddress();
    }
    return denominator;
  }

  public IntegerPolynomial getNumerator()
  {
    if (numerator == null)
    {
      numerator = new IntegerPolynomial(getNumeratorAddress(),
                                        false);
    }
    else
    {
      numerator.swigCPtr = getNumeratorAddress();
    }
    return numerator;
  }
    
  @Override
  public void close() 
  {
    delete();
  }  
  
  @SuppressWarnings("unchecked")
  @Override
  public <N extends Named> N setName(String name)
  {
    this.name = name;
    return (N) this;
  }

  @Override
  public RationalFunction additiveIdentity()
  {
    return zero();
  }
    
  @Override
  public String toString()
  {
    return arblib.fmpz_poly_q_get_str_pretty(this, "x");
  }
  
  public RationalFunction identity()
  {
    getNumerator().set(0);
    getNumerator().set(1,1);
    getDenominator().set(1);
    return this;
  }

  @Override
  public RationalFunction multiplicativeIdentity()
  {
   return one();
  }

  public RationalFunction one()
  {
    arblib.fmpz_poly_q_one(this);
    return this;
  }
  
  @Override
  public RationalFunction add(RationalFunction element, int prec, RationalFunction result)
  {
    arblib.fmpz_poly_q_add(result, this, element);
    return result;
  }

  public int bits = 128;
  
  @Override
  public int bits()
  {
    return bits;
  }

  @Override
  public int dim()
  {
    return 1;
  }

  @Override
  public RationalFunction div(RationalFunction operand, int prec, RationalFunction result)
  {
    arblib.fmpz_poly_q_div(result, this, operand);
    return result;
  }

  @Override
  public RationalFunction get(int index)
  {
    assert index == 0 : "index can only be 0";
    return this;
  }

  @Override
  public String getName()
  {
    return name;
  }

  public String name;
  
  @Override
  public RationalFunction mul(int x, int prec, RationalFunction result)
  {
    arblib.fmpz_poly_q_scalar_mul_si(result, this, x);
    return result;
  }

@Override
  public RationalFunction mul(RationalFunction x, int prec, RationalFunction result)
  {
    assertPointerConsistency();
    arblib.fmpz_poly_q_mul(result, this, x);
    refreshPointers();
    assertPointerConsistency();
    return result;
  }

  /**
   * @throws ArbException if {@link #getNumeratorAddress()} !=
   *                      {@link #getNumerator()}{@link #swigCPtr} or
   *                      {@link #getDenominatorAddress()} !=
   *                      {@link #getDenominator()}{@link #swigCPtr}
   */
  public void assertPointerConsistency()
  {
    if (!verify())
    {
      throw new ArbException(String.format("numeratorAddress=%s\ndenominatorAddress=%s\nnumerator=%s\ndenominator=%s\n",
                                           getNumeratorAddress(),
                                           getDenominatorAddress(),
                                           numerator == null ? "null" : numerator.swigCPtr,
                                           denominator == null ? "null" : denominator.swigCPtr));
    }
  }

  /**
   * Updates the {@link IntegerPolynomial#swigCPtr} of this{@link #numerator} and
   * this{@link #denominator} if they are not null. This should be called after
   * performaning any operation that could potentially result in at least one of
   * the numerator and denominator pointers changing
   */
  public void refreshPointers()
  {
    if (denominator != null)
    {
      denominator.swigCPtr = getDenominatorAddress();
    }
    if (numerator != null)
    {
      numerator.swigCPtr = getNumeratorAddress();
    }
  }
  
  @Override
  public RationalFunction newFieldElement()
  {
     return new RationalFunction();
  }

  @Override
  public RationalFunction set(RationalFunction value)
  {
    arblib.fmpz_poly_q_set(this, value);
    return this;
  }

  @Override
  public RationalFunction div(int j, int prec, RationalFunction result)
  {
    arblib.fmpz_poly_q_scalar_div_si(result, this, j);
    return result;
  }

  public RationalFunction div(Integer j, int prec, RationalFunction result)
  {
    arblib.fmpz_poly_q_scalar_div_fmpz(result, this, j.swigCPtr);
    return result;  
  }
  
  @Override
  public RationalFunction sub(RationalFunction element, int prec, RationalFunction result)
  {
    arblib.fmpz_poly_q_sub(result, this, element);
    return result;
  }

  public RationalFunction set(Real real)
  {
    try ( Fraction tmp = new Fraction() )
    {
      tmp.set(real);
      return set(tmp);
    }
  }  
  
  @Override
  public RationalFunction zero()
  {
    arblib.fmpz_poly_q_zero(this);
    return this;
  }

  public RationalFunction add(RationalFunction x, int prec)
  {
    return add(x,prec,this);
  }
  
  public RationalFunction mul(RationalFunction x, int prec)
  {
    return mul(x,prec,this);
  }
  
  public RationalFunction set(Integer integer)
  {
   set(integer.getSignedValue());
   return this;
  }

  public RationalFunction neg(RationalFunction res)
  {
    arblib.fmpz_poly_q_neg(res, this);
    return res;
  }
  
  public RationalFunction neg()
  {
    return neg(this);
  }
  
  public RationalFunction reduce()
  {
    arblib.fmpz_poly_q_canonicalise(this);
    return this;
  }
  
  public boolean isReduced()
  {   
    return arblib.fmpz_poly_q_is_canonical(this) != 0;                
  }
  
  public RationalFunction set(Fraction fraction)
  {
    getNumerator().set(fraction.getNumerator());
    getDenominator().set(fraction.getDenominator());
    return this;
  }
  
  public RationalFunction add(Fraction element, int prec, RationalFunction result)
  {
    try ( RationalFunction e = new RationalFunction())
    {
      e.set(element);
      return result.set(this).add(e, prec);
    }
  }
    

  public void setNumeratorAddress(long value) {
    arblibJNI.RationalFunction_numeratorAddress_set(swigCPtr, this, value);
  }

  public long getNumeratorAddress() {
    return arblibJNI.RationalFunction_numeratorAddress_get(swigCPtr, this);
  }

  public void setDenominatorAddress(long value) {
    arblibJNI.RationalFunction_denominatorAddress_set(swigCPtr, this, value);
  }

  public long getDenominatorAddress() {
    return arblibJNI.RationalFunction_denominatorAddress_get(swigCPtr, this);
  }

  public RationalFunction() 
  {
    this(arblibJNI.new_RationalFunction(), true);
    init();
  }


}
