/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package arb;

import arb.Integer;


import arb.documentation.TheArb4jLibrary;

/**
 * <p>
 * A
 * <a class="reference internal" href="#c.qqbar_t" title="qqbar_t"><code class=
 * "xref c c-type docutils literal notranslate"><span class=
 * "pre">qqbar_t</span></code></a> represents a real or complex algebraic number
 * (an element of
 * <span class="math notranslate nohighlight">\(\overline{\mathbb{Q}}\)</span>)
 * by its unique reduced minimal polynomial in
 * <span class="math notranslate nohighlight">\(\mathbb{Z}[x]\)</span> and an
 * isolating complex interval. The precision of isolating intervals is
 * maintained automatically to ensure that all operations on
 * <a class="reference internal" href="#c.qqbar_t" title="qqbar_t"><code class=
 * "xref c c-type docutils literal notranslate"><span class=
 * "pre">qqbar_t</span></code></a> instances are exact.
 * </p>
 * <p>
 * This representation is useful for working with individual algebraic numbers
 * of moderate degree (up to 100, say). Arithmetic in this representation is
 * expensive: an arithmetic operation on numbers of degrees <em>m</em> and
 * <em>n</em> involves computing and then factoring an annihilating polynomial
 * of degree <em>mn</em> and potentially also performing numerical root-finding.
 * For doing repeated arithmetic, it is generally more efficient to work with
 * the
 * <a class="reference internal" href="ca.html#c.ca_t" title="ca_t"><code class=
 * "xref c c-type docutils literal notranslate"><span class=
 * "pre">ca_t</span></code></a> type in a fixed number field. The
 * <a class="reference internal" href="#c.qqbar_t" title="qqbar_t"><code class=
 * "xref c c-type docutils literal notranslate"><span class=
 * "pre">qqbar_t</span></code></a> type is used internally by the
 * <a class="reference internal" href="ca.html#c.ca_t" title="ca_t"><code class=
 * "xref c c-type docutils literal notranslate"><span class=
 * "pre">ca_t</span></code></a> type to represent the embedding of number fields
 * in <span class="math notranslate nohighlight">\(\mathbb{R}\)</span> or
 * <span class="math notranslate nohighlight">\(\mathbb{C}\)</span> and to
 * decide predicates for algebraic numbers.
 * </p>
 * * @see BusinessSourceLicenseVersionOnePointOne © terms of the
 * {@link TheArb4jLibrary}
 * 
 * @author ©2024 Stephen Crowley
 */
public class AlgebraicNumber implements AutoCloseable,NamedField<AlgebraicNumber>,Typesettable {
  protected long swigCPtr;
  protected boolean swigCMemOwn;

  public AlgebraicNumber(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(AlgebraicNumber obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        arblibJNI.delete_AlgebraicNumber(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  public boolean isReal()
  {
    return arblib.qqbar_is_real(this) != 0;
  }
  
  public boolean isRational()
  {
    return arblib.qqbar_is_rational(this) != 0;
  }
  
  public boolean isInteger()
  {
    return arblib.qqbar_is_integer(this) != 0;
  }
  
  public AlgebraicNumber swap(AlgebraicNumber reference)
  {
    arblib.qqbar_swap(reference, this);
    return reference;
  }
  
  @Override
  public String typeset()
  {
    try ( var blip = new SymbolicExpression())
    {
      return getSymbolicFormula(blip, FormulaGenerationMethod.All).typeset();
    }
  }
  
  public AlgebraicNumber sqrt()
  {
    return sqrt(this);
  }
  
  public AlgebraicNumber set( int val )
  {
    arblib.qqbar_set_si(this, val);
    return this;
  }
  

  public AlgebraicNumber root(int n, AlgebraicNumber result)
  {
    arblib.qqbar_root_ui(result, this, n);
    return result;
  }
  
  @Override
  public String toString()
  {
    try ( var blip = new SymbolicExpression())
    {
      StringBuilder sb = new StringBuilder();
      if (name != null)
      {
        sb.append(name + "=");
      }
      sb.append(getSymbolicFormula(blip, FormulaGenerationMethod.All));
      return sb.toString();
    }
  }
  
  public Real getReal(int bits, Real result)
  {
    arblib.qqbar_get_arb(result, this, bits);
    return result;
  }

  public AlgebraicNumber sub(Integer x, int prec, AlgebraicNumber result)
  {
    arblib.qqbar_sub_fmpz(result, this, x.swigCPtr);
    return result;
  }
  
  public Complex getComplex(int bits, Complex result)
  {
    arblib.qqbar_get_acb(result, this, bits);
    return result;
  }
  
  public AlgebraicNumber pow(AlgebraicNumber operand, AlgebraicNumber res)
  {
    arblib.qqbar_pow(res, this, operand);
    return res;
  }
  
  public AlgebraicNumber pow(Fraction operand, AlgebraicNumber res)
  {
    arblib.qqbar_pow_fmpq(res, this, operand);
    return res;
  }
  
  public AlgebraicNumber inverse()
  {
    return inverse(this);
  }
  
  public AlgebraicNumber pow(Integer exp)
  {
    return pow(exp,this);
  }
  
  public SymbolicExpression getSymbolicRepresentation(SymbolicExpression result)
  {
    arblib.qqbar_get_fexpr_repr(result, this);
    return result;
  }

  public SymbolicExpression getSymbolicFormula(SymbolicExpression result, FormulaGenerationMethod... methods)
  {
    long flags = 0;
    for (FormulaGenerationMethod method : methods)
    {
      flags = flags | method.value();
    }
    return getSymbolicFormula(result, flags);
  }
  
  public Complex mul(Complex x, int prec, Complex result)
  {
    return getComplex(prec, result).mul(x,prec);
  }  

  @Override
  public AlgebraicNumber inverse(AlgebraicNumber result)
  {
    arblib.qqbar_inv(result, this);
    return result;
  }
  
  protected SymbolicExpression getSymbolicFormula(SymbolicExpression result, long flags)
  {
    arblib.qqbar_get_fexpr_formula(result, this, flags);
    return result;
  }

  public AlgebraicNumber add(Integer addend, int bits, AlgebraicNumber result)
  {
    assert addend != null && addend.swigCPtr != 0 : "addend is null";
    assert result != null && result.swigCPtr != 0 : "result is null";
    arblib.qqbar_add_fmpz(result, this, addend.swigCPtr);
    return result;
  }
  
  public AlgebraicNumber pow(Integer n, AlgebraicNumber result)
  {
    assert n != null && n.swigCPtr != 0 : "n is null or has null swigCPtr";
    assert result != null && result.swigCPtr != 0 : "result is null or has null swigCPtr";
    arblib.qqbar_pow_fmpz(result, this, n.swigCPtr);
    return result;
  }

  @Override
  public AlgebraicNumber div(AlgebraicNumber x, int prec, AlgebraicNumber result)
  {
    assert x != null && x.swigCPtr != 0 : "x is null or has null swigCPtr";
    assert result != null && result.swigCPtr != 0 : "result is null or has null swigCPtr";
    arblib.qqbar_div(result, this, x);
    return result;
  }

  @Override
  public AlgebraicNumber mul(AlgebraicNumber x, int prec, AlgebraicNumber result)
  {
    assert x != null && x.swigCPtr != 0 : "x is null or has null swigCPtr";
    assert result != null && result.swigCPtr != 0 : "result is null or has null swigCPtr";
    arblib.qqbar_mul(result, this, x);
    return result;
  }
  
  
  public AlgebraicNumber set(Integer val)
  {
    assert val != null && val.swigCPtr != 0 : "val is null or has a null swigCPtr";
    arblib.qqbar_set_fmpz(this, val.swigCPtr);
    return this;
  }
  
  public AlgebraicNumber(Complex complex)
  {
    this();
    setEnclosure(complex);    
  }

 public AlgebraicNumber init()
 {
   arblib.qqbar_init(this);
   return this;
 }
 
  @Override
  public <E> E get(int i)
  {
    assert false : "TODO: Auto-generated method stub";
    return null;
  }

  @Override
  public NamedRing<AlgebraicNumber> set(Fraction val)
  {
	assert val != null && val.swigCPtr != 0 : "val is null or has null swigCPtr";
    arblib.qqbar_set_fmpq(this, val);
    return this;
  }

  String name;
  
  public RealPolynomial div(RealPolynomial x, int prec, RealPolynomial result)
  {   
      return result.set(this).div(x, prec, result);    
  }
  
  @SuppressWarnings("unchecked")
  @Override
  public <N extends Named> N setName(String name)
  {
    this.name = name;
    return (N) this;
  }

  @Override
  public String getName()
  {
    return name;
  }

  @Override
  public AlgebraicNumber additiveIdentity()
  {
    assert false : "TODO: Auto-generated method stub";
    return null;
  }

  @Override
  public AlgebraicNumber multiplicativeIdentity()
  {
    assert false : "TODO: Auto-generated method stub";
    return null;
  }

  @Override
  public AlgebraicNumber add(AlgebraicNumber x, int prec, AlgebraicNumber result) 
  {
    assert x != null && x.swigCPtr != 0 : "x is null or has null swigCPtr";
    assert result != null && result.swigCPtr != 0 : "result is null or has null swigCPtr";
    arblib.qqbar_add(result, this, x);
    return result;
  }

  @Override
  public int bits()
  {
    return 128;
  }

  @Override
  public int dim()
  {
    return 1;
  }

  @Override
  public AlgebraicNumber div(int j, int prec, AlgebraicNumber result)
  {
    assert result != null && result.swigCPtr != 0 : "result is null or has null swigCPtr";
    arblib.qqbar_div_si(result, this, j);
    return result;
  }

  public AlgebraicNumber mul(Fraction x, int prec, AlgebraicNumber result)
  {
    assert x != null && x.swigCPtr != 0 : "x is null or has null swigCPtr";
    assert result != null && result.swigCPtr != 0 : "result is null or has null swigCPtr";
    arblib.qqbar_mul_fmpq(result, this, x);
    return result;
  }
  
  public AlgebraicNumber mul(Integer x, int prec, AlgebraicNumber result)
  {
    assert x != null && x.swigCPtr != 0 : "x is null or has null swigCPtr";
    assert result != null && result.swigCPtr != 0 : "result is null or has null swigCPtr";
    arblib.qqbar_mul_fmpz(result, this, x.swigCPtr);
    return result;
  }  

  @Override
  public AlgebraicNumber mul(int x, int prec, AlgebraicNumber result)
  {
    assert result != null && result.swigCPtr != 0 : "result is null or has null swigCPtr";
    arblib.qqbar_mul_si(result, this, x);
    return result;
  }


  @Override
  public AlgebraicNumber newFieldElement()
  {
    return new AlgebraicNumber();
  }

  @Override
  public AlgebraicNumber set(AlgebraicNumber value)
  {
    assert value != null && value.swigCPtr != 0 : "value or value.swigCPtr is null";
    arblib.qqbar_set(this, value);
    return this;
  }

  @Override
  public AlgebraicNumber sub(AlgebraicNumber x, int prec, AlgebraicNumber result) 
  {
    assert x != null && x.swigCPtr != 0 : "x is null or has null swigCPtr";
    assert result != null && result.swigCPtr != 0 : "result is null or has null swigCPtr";
    arblib.qqbar_sub(result, this, x);
    return result;
  }

  @Override
  public AlgebraicNumber zero()
  {
    assert false : "TODO: Auto-generated method stub";
    return null;
  }

  @Override
  public void close()
  {
    delete();
  }

  public AlgebraicNumber sqrt(AlgebraicNumber result)
  {
    return sqrt(0, result);
  }

  public AlgebraicNumber sqrt(int bits, AlgebraicNumber result)
  {
    arblib.qqbar_sqrt(result, this);
    return result;
  }
  static
  {
    System.loadLibrary("arblib");
  }
 
 

  public void setPoly(IntegerPolynomial value) {
    arblibJNI.AlgebraicNumber_poly_set(swigCPtr, this, IntegerPolynomial.getCPtr(value), value);
  }

  public IntegerPolynomial getPoly() {
    long cPtr = arblibJNI.AlgebraicNumber_poly_get(swigCPtr, this);
    return (cPtr == 0) ? null : new IntegerPolynomial(cPtr, false);
  }

  public void setEnclosure(Complex value) {
    arblibJNI.AlgebraicNumber_enclosure_set(swigCPtr, this, Complex.getCPtr(value), value);
  }

  public Complex getEnclosure() {
    long cPtr = arblibJNI.AlgebraicNumber_enclosure_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Complex(cPtr, false);
  }

  public AlgebraicNumber() 
  {
    this(arblibJNI.new_AlgebraicNumber(), true);
    init();
  }


}
