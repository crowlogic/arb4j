/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package arb;

import static arb.arblib.*;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
import java.util.Iterator;
import java.util.stream.Stream;

import arb.utensils.Utensils;


/**
 * A {@link Float} contains four words: <br>
 * <ul>
 * <li>an fmpz exponent (exp)</li>
 * <li>a size field tracking the number of limbs used (one bit of this field is
 * also used for the sign of the number)</li>
 * <li>and two more words</li>
 * </ul>
 * <br>
 * If the precision is 128 bits or less then the last two (quad)words hold the
 * value directly if there are at most two limbs, otherwise they contain one
 * alloc field which tracks the total number of limbs allocated limbs, some of
 * which can be unused, and a pointer to the actual limbs.<br>
 * The limit in arb is 64 bits on a 32bit machine but arb4j is recommended to be
 * used on 64bit architecures (or better?) only
 * 
 */

public class Float implements AutoCloseable,Comparable<Float>,Field<Float> {
  protected long swigCPtr;
  protected boolean swigCMemOwn;

  public Float(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(Float obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        arblibJNI.delete_Float(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  static
  {
    System.loadLibrary("arblib");
  }

  public static RoundingMode defaultRoundingMode = RoundingMode.Near;

  public static Float valueOf(String string, int bits)
  {
    try ( var x = new Real(string,
                           bits))
    {
      return x.getMid();
    }
  }

  public static final int BYTES = 32;

  MemorySegment           segment;
  static Arena            scope = Arena.ofAuto();
  public int              dim;

  protected Float(MemorySegment segment, int length)
  {
    this(segment.address(),
         false);
    this.segment = segment;
    this.dim     = length;
  }

  @Override
  public Float additiveIdentity()
  {
    return set(FloatConstants.zero);
  }

  @Override
  public Float multiplicativeIdentity()
  {
    return set(FloatConstants.one);
  }
  
  public String name;

  @SuppressWarnings("unchecked")
  public Float setName(String name)
  {
    this.name = name;
    return this;
  }

  @Override
  public String getName()
  {
    return name;
  }

  /**
   * @see arblib#arf_bits(Float)
   */
  @Override
  public int bits()
  {
    return arblib.arf_bits(this);
  }
  
  /**
   * 
   * @param length
   * @param aligned if true then the buffer is aligned on a page boundary so that
   *                it is {@link Lockable}
   * @return
   */
  public static Float newVector(int length, boolean aligned)
  {
    return new Float(aligned ? scope.allocate(Float.BYTES * length,
                                              arb.arblib.getpagesize()) : scope.allocate(Float.BYTES * length),
                     length);
  }

  @Override
  public Iterator<Float> iterator()
  {
    assert false : "TODO";
    return null;
  }

  @Override
  public int dim()
  {
    return dim;
  }

  @Override
  public Float get(int index)
  {
    assert false : "TODO: let Float be an array(vector) like Real does";
    return null;
  }

  @Override
  public Float div(Float j, int prec, Float result)
  {
    return div(j, prec, defaultRoundingMode, result);
  }

  public Float abs(Float w)
  {
    arf_abs(w, this);
    return w;
  }

  /**
   * Self-referencing this{@link #add(int, int, Float)}
   * 
   * @param n
   * @param precision
   * @return this number plus n
   */
  public Float add(Float add, int prec)
  {
    return add(add, prec, this);
  }

  /**
   * Self-referencing this{@link #div(int, int, Float)}
   * 
   * @param n
   * @param precision
   * @return this number divided by n
   */
  public Float div(int n, int precision)
  {
    return div(n, precision, this);
  }

  /**
   * @return {@link arb#arf_is_zero(Float)} != 0
   */
  public boolean isZero()
  {
    return arf_is_zero(this) != 0;
  }

  @Override
  public int compareTo(Float o)
  {
    return arf_cmp(this, o);
  }

  /**
   * 
   * @return {@link arb#arf_is_nan(Float)} != 0
   */
  public boolean isNotANumber()
  {
    return arf_is_nan(this) != 0;
  }

  /**
   * @return {@link arb#arf_equal(Float, Float)} != 0
   */
  @Override
  public boolean equals(Object obj)
  {
    if (!(obj instanceof Float))
    {
      return false;
    }
    Float that = (Float) obj;
    return arf_equal(this, that) != 0;
  }

  /**
   * 
   * @return {@link arb#arf_is_inf(Float)} != 0
   */
  public boolean isInfinite()
  {
    return arf_is_inf(this) != 0;
  }

  @Override
  public void close()
  {
    clear();
  }

  protected long getPointer()
  {
    return swigCPtr;
  }

  public Float clear()
  {
    if (swigCMemOwn)
    {
      arf_clear(this);
    }
    return this;
  }

  public String toString(int digits)
  {
    return Utensils.removeTrailingZeros(arf_get_str(this, digits));
  }

  public Float zero()
  {
    arf_zero(this);
    return this;
  }

  public Float neg(Float res)
  {
    arf_neg(res, this);
    return this;
  }

  @Override
  public Float mul(Float y, int prec, Float res)
  {
    arf_mul_rnd_down(res, this, y, prec);
    return this;
  }

  public Magnitude getMagnitude(Magnitude v)
  {
    arf_get_mag(v, this);
    return v;
  }

  @Override
  public Float set(Float f)
  {
    arf_set(this, f);
    return this;
  }

  public Float set(double i)
  {
    arf_set_d(this, i);
    return this;
  }

  public Float init()
  {
    arf_init(this);
    return this;
  }

  public String toString()
  {
    return toString(15);
  }

  @Override
  public Float add(Float ay, int precision, Float result)
  {
    arf_add(result, this, ay, precision, defaultRoundingMode.ordinal());
    return result;
  }

  public Float add(Float ay, int thisprec, RoundingMode roundingMode, Float result)
  {
    arf_add(result, this, ay, thisprec, roundingMode.ordinal());
    return result;
  }

  public double doubleValue(RoundingMode roundingMode)
  {
    return arf_get_d(this, roundingMode.ordinal());
  }

  @Override
  public Float sub(Float ay, int thisprec, Float result)
  {
    return sub(ay, thisprec, defaultRoundingMode, result);
  }

  public Float sub(Float ay, int thisprec, RoundingMode round, Float result)
  {
    arf_sub(result, this, ay, thisprec, round.ordinal());
    return result;
  }

  public Float mul(int ay, int thisprec, Float result)
  {
    arf_mul_ui(result, this, ay, thisprec, defaultRoundingMode.ordinal());
    return result;
  }

  public Float div(Float i, int thisprec, RoundingMode round, Float res)
  {
    arf_div(res, this, i, thisprec, round.ordinal());
    return res;
  }

  public Float div(int i, int thisprec, RoundingMode round, Float res)
  {
    arf_div_ui(res, this, i, thisprec, round.ordinal());
    return res;
  }

  public Float div(int i, int thisprec, Float res)
  {
    return div(i, thisprec, defaultRoundingMode, res);
  }

  public double doubleValue()
  {
    return doubleValue(defaultRoundingMode);
  }

  /**
   * Calls {@link arb#arf_mul_2exp_si(Float, Float, int)}(res,this,-1)
   * 
   * @param res where to store the result, aliasing with res=this is perfectly
   *            fine as is usually the case
   * @return res
   */
  public Float half(Float res)
  {
    arf_mul_2exp_si(res, this, -1);
    return res;
  }

  @Override
  public Float newFieldElement()
  {
    return new Float();
  }

  public Float(double d)
  {
    this();
    set(d);
  }

  @Override
  public Stream<Float>
         stream()
  {
    assert false : "TODO";
    return null;
  }
  

  public void setExp(long value) {
    arblibJNI.Float_exp_set(swigCPtr, this, value);
  }

  public long getExp() {
    return arblibJNI.Float_exp_get(swigCPtr, this);
  }

  public Float() {
    this(arblibJNI.new_Float(), true);
  }

}
