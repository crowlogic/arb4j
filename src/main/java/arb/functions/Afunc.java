package arb.functions;

import arb.AlgebraicNumber;
import arb.Complex;
import arb.ComplexConstants;
import arb.FractionConstants;
import arb.Initializable;
import arb.Integer;
import arb.Real;
import arb.Typesettable;

public class Afunc implements
                   RealToComplexFunction,
                   Typesettable,
                   AutoCloseable,
                   Initializable
{
  public boolean         isInitialized;
  public final Integer   c‚Ñ§0000  = new Integer("0");
  public Complex         v‚ÑÇ0005  = new Complex();
  public Complex         v‚ÑÇ0006  = new Complex();
  public Complex         v‚ÑÇ0007  = new Complex();
  public Real            v‚Ñù0005  = new Real();
  public Real            v‚Ñù0006  = new Real();
  public AlgebraicNumber vùî∏0001 = new AlgebraicNumber();
  public Œ∏               Œ∏;
  public Real            Œª;

  @Override
  public Class<Real> domainType()
  {
    return Real.class;
  }

  @Override
  public Class<Complex> coDomainType()
  {
    return Complex.class;
  }

  @Override
  public Complex evaluate(Real t, int order, int bits, Complex result)
  {
    if (!isInitialized)
    {
      initialize();
    }

    return ComplexConstants.‚Öà.mul(Œª, bits, v‚ÑÇ0005)
                             .mul(((Real) Œ∏.evaluate(t, order, bits, v‚Ñù0005)).sub(t, bits, v‚Ñù0006),
                                  bits,
                                  v‚ÑÇ0006)
                             .exp(bits, v‚ÑÇ0007)
                             .mul(c‚Ñ§0000.pow(FractionConstants.oneHalf, bits, vùî∏0001),
                                  bits,
                                  result);
  }

  public Function<Real, Complex> derivative()
  {
    return Function.express(Real.class, Complex.class, Function.class, "diff(null,t)");
  }

  @Override
  public void initialize()
  {
    if (isInitialized)
    {
      throw new AssertionError("Already initialized");
    }
    else
    {
      isInitialized = true;
    }
  }

  @Override
  public void close()
  {
    c‚Ñ§0000.close();
    v‚ÑÇ0005.close();
    v‚ÑÇ0006.close();
    v‚ÑÇ0007.close();
    v‚Ñù0005.close();
    v‚Ñù0006.close();
    vùî∏0001.close();
    Œ∏.close();
  }

  @Override
  public String toString()
  {
    return "t‚ûî(exp((‚Öà*Œª)*((Œ∏(t))-t)))*(0^¬Ω)";
  }

  @Override
  public String typeset()
  {
    return "\\left(\\exp(\\left(\\left(‚Öà \\cdot Œª\\right) \\cdot \\left(\\Œ∏(t)-t\\right)\\right)) \\cdot {0}^{\\frac{1}{2}}\\right)";
  }
}