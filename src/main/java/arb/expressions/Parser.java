package arb.expressions;

import java.text.Normalizer;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.UUID;

import arb.Fraction;
import arb.FractionConstants;
import arb.documentation.BusinessSourceLicenseVersionOnePointOne;
import arb.documentation.TheArb4jLibrary;
import arb.expressions.nodes.LiteralConstantNode;

/**
 * @see BusinessSourceLicenseVersionOnePointOne ¬© terms of the
 *      {@link TheArb4jLibrary}
 * 
 * @author ¬©2024 Stephen Crowley
 */
public class Parser
{
  public static String removeIndependentVariableSpecification(String expression)
  {
    int index = expression.indexOf(‚Öà);
    return index == -1 ? expression : expression.substring(index);
  }

  public static char[]                       commonFractions            =
  { '¬º', '¬Ω', '¬æ', '‚Öê', '‚Öë', '‚Öí', '‚Öì', '‚Öî', '‚Öï', '‚Öñ', '‚Öó', '‚Öò', '‚Öô', '‚Öö', '‚Öõ', '‚Öú', '‚Öù', '‚Öû' };

  public static String[]                     fractionConstantFieldNames =
  { "oneQuarter",
    "oneHalf",
    "threeQuarters",
    "oneSeventh",
    "oneNineth",
    "oneTenth",
    "oneThird",
    "twoThird",
    "oneFifth",
    "twoFifths",
    "threeFifths",
    "fourFifths",
    "oneSixth",
    "fiveSixths",
    "oneEight",
    "threeEights",
    "fiveEights",
    "sevenEights" };

  public static HashMap<Character, Fraction> fractions                  = new HashMap<>();

  public static HashMap<Character, String>   fractionFieldNames         = new HashMap<>();

  static
  {
    for (int i = 0; i < commonFractions.length; i++)
    {
      fractionFieldNames.put(commonFractions[i], fractionConstantFieldNames[i]);
    }

    fractions.put('¬Ω', FractionConstants.oneHalf);
    fractions.put('¬º', FractionConstants.oneQuarter);
    fractions.put('¬æ', FractionConstants.threeQuarters);
    fractions.put('‚Öê', FractionConstants.oneSeventh);
    fractions.put('‚Öë', FractionConstants.oneNineth);
    fractions.put('‚Öí', FractionConstants.oneTenth);
    fractions.put('‚Öì', FractionConstants.oneThird);
    fractions.put('‚Öî', FractionConstants.twoThirds);
    fractions.put('‚Öï', FractionConstants.oneFifth);
    fractions.put('‚Öñ', FractionConstants.twoFifths);
    fractions.put('‚Öó', FractionConstants.threeFifths);
    fractions.put('‚Öò', FractionConstants.fourFifths);
    fractions.put('‚Öô', FractionConstants.oneSixth);
    fractions.put('‚Öö', FractionConstants.fiveSixths);
    fractions.put('‚Öõ', FractionConstants.oneEight);
    fractions.put('‚Öú', FractionConstants.threeEights);
    fractions.put('‚Öù', FractionConstants.fiveEights);
    fractions.put('‚Öû', FractionConstants.sevenEights);
  }

  public static HashSet<
                Character> greekAndBlackLetterChars = new HashSet<Character>(Arrays.asList('‚Ñ≠',
                                                                                           'Œì',
                                                                                           'Œî',
                                                                                           'Œò',
                                                                                           'Œõ',
                                                                                           'Œû',
                                                                                           'Œ†',
                                                                                           'Œ£',
                                                                                           'Œ¶',
                                                                                           'Œ®',
                                                                                           'Œ©',
                                                                                           'Œ≥',
                                                                                           'Œ¥',
                                                                                           'Œ∏',
                                                                                           'Œª',
                                                                                           'Œæ',
                                                                                           'œÄ',
                                                                                           'œÇ',
                                                                                           'œÜ',
                                                                                           'œà',
                                                                                           'œâ',
                                                                                           'œë',
                                                                                           'œí',
                                                                                           'œñ',
                                                                                           'œï',
                                                                                           'œ±',
                                                                                           'œ∞',
                                                                                           'Œ∂'));

  public static char subscriptedDigitToRegular(char c)
  {
    return switch (c)
    {
    case '‚ÇÄ' -> '0';
    case '‚ÇÅ' -> '1';
    case '‚ÇÇ' -> '2';
    case '‚ÇÉ' -> '3';
    case '‚ÇÑ' -> '4';
    case '‚ÇÖ' -> '5';
    case '‚ÇÜ' -> '6';
    case '‚Çá' -> '7';
    case '‚Çà' -> '8';
    case '‚Çâ' -> '9';
    default -> c;
    };
  }

  /**
   * <pre>
   * "1\u204416" (without spaces) to display 1/16 as a fraction glyph. The rendering  declares the 
   * fraction has ended when it encounters a character that cannot be part of a fraction, i.e. 
   * something that is not an ASCII digit. 
   * 
   * Extending on that, in order to display one and fifteen sixteenths, rather than one hundred 
   * fifteen sixteenths, Any zero-width, invisible character can be used to separate the "1" from 
   * the "15" in an expression such as "15‚ÅÑ16"  because the rendering engine will declare the fraction 
   * ended when it encounters a symbol such as U+2064 INVISIBLE PLUS, U+200C ZERO WIDTH NON-JOINER, 
   * U+2060 WORD JOINER or other invisible character which produces the same result
   * </pre>
   * 
   * @param input
   * @return
   */
  public static String stripInvisibleUnicodeFormattingCharacters(String input)
  {
    return input.replaceAll("\\p{Cf}", ""); // Cf is the Unicode category for invisible formatting
                                            // characters
  }

  /**
   * Checks whether a given character is a digit, a decimal point, or '¬Ω'
   * 
   * @param ch The character to check
   * @return true if the character is a digit or a decimal point; false otherwise
   */
  static boolean isNumeric(char ch)
  {
    ch = subscriptedDigitToRegular(ch);

    boolean isDigit = ch >= '0' && ch <= '9';
    return isDigit || ch == '.' || ch == '‚àû' || Parser.fractions.containsKey(ch);
  }

  /**
   * Checks whether a given character is a Latin or Greek alphabet character.
   * 
   * @param ch The character to check
   * @return true if the character is a Latin or Greek alphabet character; false
   *         otherwise
   */
  static public boolean isDigit(int ch)
  {
    return ch >= '0' && ch <= '9';
  }

  public static final char ‚Öà = LiteralConstantNode.‚Öà.charAt(0);

  /**
   * Checks whether a given character is a Latin or Greek alphabet character.
   * 
   * @param ch The character to check
   * @return true if the character is a Latin or Greek alphabet character; false
   *         otherwise
   */
  static public boolean isAlphabeticalGreekSpecialOrBlackLetter(char ch, boolean digit)
  {
    boolean positiveCheck = isAlphabetical(ch) || isGreekOrBlackLetter(ch) || ch == ‚Öà || ch == '‚àö'
                  || ch == '‚ÇÄ' || isSuperscript(ch) || (digit && isDigit(ch));
    boolean negativeCheck = ch != 'Œ£';
    return positiveCheck && negativeCheck;
  }

  public static boolean isAlphabetical(int ch)
  {
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
  }

  public static boolean isAlphabetical(char ch)
  {
    return isAlphabetical((int) ch);
  }

  public static boolean isSubscript(char ch)
  {
    return SUBSCRIPT_CHARACTERS.contains(ch);
  }

  /**
   * 
   * @param ch
   * @return true if ch represents an upper or lowercase GreekRegistration
   */
  public static boolean isGreekOrBlackLetter(int ch)
  {
    return (ch >= 0x0391 && ch <= 0x03A9) || (ch >= 0x03B1 && ch <= 0x03C9)
                  || greekAndBlackLetterChars.contains(Character.valueOf((char) ch));
  }

  /**
   * Replaces the two character ASCII arrow version -> with ‚ûî used to declare the
   * independent variable or declare a multivariate function "(n,x)‚ûîn*x" for
   * instance becomes "(n,x)‚ûîn*x" and replaces ... with ‚Ä¶ Also replaces
   * superscript alphabetical characters with '^' followed by their normal ASCII
   * counterparts.
   *
   * @param expression The expression to transform.
   *
   * @return The expression with the described substitutions made.
   */
  public static String transformToJavaAcceptableCharacters(String expression)
  {
    expression = stripInvisibleUnicodeFormattingCharacters(expression.replace("->", "‚ûî")
                                                                     .replace("‚áí", "‚ûî")
                                                                     .replace("...", "‚Ä¶")
                                                                     .replace("..", "‚Ä¶")
                                                                     .replaceAll("ùëñ", "‚Öà")
                                                                     .replaceAll("I", "‚Öà"));

    for (int i = 0; i < superscripts.length; i++)
    {
      expression = expression.replace(superscripts[i], String.format("^(%s)", normals[i]));
    }

    return Normalizer.normalize(expression, Normalizer.Form.NFD);
  }

  public static String expressionToUniqueClassname(String expression)
  {
    String str = expression.replaceAll("\\.{2,}", "‚Ä¶")
                           .replace(';', ',')
                           .replace(" ", "")
                           // .replace("+", "Plus")
                           // .replace("-", "Minus")
                           // .replace("*", "Times")
                           .replace("/", "‚ÅÑ")
                           // .replace("^", "ToThePowerOf")
                           .replace(".", "_")
                           .replace("{", "Where")
                           .replace("}", "")
                           .replace("‚Çç", "")
                           .replace("‚Çé", "")
                           .replace(">", "")
                           .replace("=", "Eq")
                           .replace("‚Çô", "N")
                           .replace("‚Ä¶", "To")
                           .replace("!", "Bang")
                           .replace("[", "Ôºª")
                           .replace("]", "ÔºΩ")
                           .replace("‚ûî", "To");
    // .replace("¬Ω", "Half"

    if (!str.isEmpty())
    {
      str = (isDigit(str.charAt(0)) ? "_" : "") + str;
    }
    if (str.length() >= 250)
    {
      UUID uuid = UUID.nameUUIDFromBytes(str.getBytes());
      str = uuid.toString().replace("-", "_");
    }
    return str;
  }

  public static final HashSet<
                Character>               SUBSCRIPT_CHARACTERS         = new HashSet<
                              Character>(Arrays.asList('‚ÇÄ', '‚ÇÅ', '‚ÇÇ', '‚ÇÉ', '‚ÇÑ', '‚ÇÖ', '‚ÇÜ', '‚Çá', '‚Çà', '‚Çâ', '‚Çê', '‚Çë', '‚Çí', '‚Çì', '‚Çî', '‚Çï', '‚Çñ', '‚Çó', '‚Çò', '‚Çô', '‚Çö', '‚Çõ', '‚Çú'));

  public static final char[]             SUPERSCRIPT_DIGITS_ARRAY     = new char[]
  { '‚Å∞', '¬π', '¬≤', '¬≥', '‚Å¥', '‚Åµ', '‚Å∂', '‚Å∑', '‚Å∏', '‚Åπ' };

  public static final char[]             SUBSCRIPT_DIGITS_ARRAY       = new char[]
  { '‚ÇÄ', '‚ÇÅ', '‚ÇÇ', '‚ÇÉ', '‚ÇÑ', '‚ÇÖ', '‚ÇÜ', '‚Çá', '‚Çà', '‚Çâ' };

  public static final char[]             SUBSCRIPT_CHARACTERS_ARRAY   =
  { '‚Çê', '‚Çë', '‚Çí', '‚Çì', '‚Çî', '‚Çï', '‚Çñ', '‚Çó', '‚Çò', '‚Çô', '‚Çö', '‚Çõ', '‚Çú' };

  public static int[]                    lowercaseSuperscriptAlphabet =
  { '·µÉ',
    '·µá',
    '·∂ú',
    '·µà',
    '·µâ',
    '·∂†',
    '·µç',
    ' ∞',
    '‚Å±',
    ' ≤',
    '·µè',
    'À°',
    '·µê',
    '‚Åø',
    '·µí',
    '·µñ',
    0x107A5,
    ' ≥',
    'À¢',
    '·µó',
    '·µò',
    '·µõ',
    ' ∑',
    'À£',
    ' ∏',
    '·∂ª' };

  public static final HashSet<
                Character>               lowercaseSubscriptAlphabet   = new HashSet<
                              Character>(Arrays.asList('‚Çê', '‚Çë', '‚Çí', '‚Çì', '‚Çî', '‚Çï', '‚Çñ', '‚Çó', '‚Çò', '‚Çô', '‚Çö', '‚Çõ', '‚Çú'));
  /**
   * Not all uppercase letters have UTF superscript representations
   */
  public static int[]                    uppercaseSuperscriptAlphabet =
  { '·¥¨', '·¥Æ', '·¥∞', '·¥±', '·¥≥', '·¥¥', '·¥µ', '·¥∂', '·¥∑', '·¥∏', '·¥π', '·¥∫', '·¥º', '·¥æ', '·¥ø', '·µÄ', '·µÅ', '‚±Ω', '·µÇ' };

  public static final String[]           superscripts                 =
  { "·µÉ",
    "·µá",
    "·∂ú",
    "·µà",
    "·µâ",
    "·∂†",
    "·µç",
    " ∞",
    "‚Å±",
    " ≤",
    "·µè",
    "À°",
    "·µê",
    "‚Åø",
    "·µí",
    "·µñ",
    String.format("%c", 0x107A5),
    " ≥",
    "À¢",
    "·µó",
    "·µò",
    "·µõ",
    " ∑",
    "À£",
    " ∏",
    "·∂ª",
    "·µÖ",
    "·µù",
    "·µû",
    "·µü",
    "·µã",
    "·∂ø",
    "·µ†",
    "·µ°" };

  public static final String[]           normals                      =
  { "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g",
    "h",
    "i",
    "j",
    "k",
    "l",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    "Œ±",
    "Œ≤",
    "Œ≥",
    "Œ¥",
    "Œµ",
    "Œ∏",
    "œÜ",
    "œá" };

  public static final HashSet<Character> superscriptChars             = new HashSet<
                Character>(Arrays.asList(superscripts).stream().map(s -> s.charAt(0)).toList());

  public static boolean isSuperscript(char character)
  {
    return superscriptChars.contains(character);
  }

  public static String subscriptAndSuperscriptsToRegular(String input)
  {
    return input.replace("‚ÇÄ", "0")
                .replace("‚ÇÅ", "1")
                .replace("‚ÇÇ", "2")
                .replace("‚ÇÉ", "3")
                .replace("‚ÇÑ", "4")
                .replace("‚ÇÖ", "5")
                .replace("‚ÇÜ", "6")
                .replace("‚Çá", "7")
                .replace("‚Çà", "8")
                .replace("‚Çâ", "9")
                .replace("‚Çê", "a")
                .replace("‚Çë", "e")
                .replace("‚Çï", "h")
                .replace("·µ¢", "i")
                .replace("‚±º", "j")
                .replace("‚Çñ", "k")
                .replace("‚Çó", "l")
                .replace("‚Çò", "m")
                .replace("‚Çô", "n")
                .replace("‚Çí", "o")
                .replace("‚Çö", "p")
                .replace("·µ£", "r")
                .replace("‚Çõ", "s")
                .replace("‚Çú", "t")
                .replace("·µ§", "u")
                .replace("·µ•", "v")
                .replace("‚Çì", "x")
                .replace("‚ÅΩ", "(")
                .replace("‚Åæ", ")");
  }

  public static String toSuperscript(int number)
  {
    StringBuilder result    = new StringBuilder();
    String        numberStr = Integer.toString(number);

    for (int i = 0; i < numberStr.length(); i++)
    {
      result.append(Parser.digitToSuperscript(numberStr.charAt(i)));
    }

    return result.toString();
  }

  public static char digitToSuperscript(char digit)
  {
    switch (digit)
    {
    case '0':
      return '‚Å∞';
    case '1':
      return '¬π';
    case '2':
      return '¬≤';
    case '3':
      return '¬≥';
    case '4':
      return '‚Å¥';
    case '5':
      return '‚Åµ';
    case '6':
      return '‚Å∂';
    case '7':
      return '‚Å∑';
    case '8':
      return '‚Å∏';
    case '9':
      return '‚Åπ';
    default:
      throw new IllegalArgumentException("Not a digit: " + digit);
    }
  }

}