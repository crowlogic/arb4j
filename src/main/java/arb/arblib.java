/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package arb;

public class arblib {
  public static int fmpz_is_one(long f) {
    return arblibJNI.fmpz_is_one(f);
  }

  public static int fmpz_is_pm1(long f) {
    return arblibJNI.fmpz_is_pm1(f);
  }

  public static int fmpq_cmp_si(Fraction x, int numCols) {
    return arblibJNI.fmpq_cmp_si(Fraction.getCPtr(x), x, numCols);
  }

  public static int fmpq_cmp_ui(Fraction x, long numCols) {
    return arblibJNI.fmpq_cmp_ui(Fraction.getCPtr(x), x, numCols);
  }

  public static int fmpq_cmp_fmpz(Fraction x, long y) {
    return arblibJNI.fmpq_cmp_fmpz(Fraction.getCPtr(x), x, y);
  }

  public static int fmpq_cmp(Fraction x, Fraction y) {
    return arblibJNI.fmpq_cmp(Fraction.getCPtr(x), x, Fraction.getCPtr(y), y);
  }

  public static int arb_mat_solve(RealMatrix X, RealMatrix A, RealMatrix B, int prec) {
    return arblibJNI.arb_mat_solve(RealMatrix.getCPtr(X), X, RealMatrix.getCPtr(A), A, RealMatrix.getCPtr(B), B, prec);
  }

  public static void arb_sgn(Real res, Real x) {
    arblibJNI.arb_sgn(Real.getCPtr(res), res, Real.getCPtr(x), x);
  }

  public static XDO xdo_new(String display) {
    long cPtr = arblibJNI.xdo_new(display);
    return (cPtr == 0) ? null : new XDO(cPtr, false);
  }

  public static int xdo_activate_window(XDO xdo, long wid) {
    return arblibJNI.xdo_activate_window(XDO.getCPtr(xdo), xdo, wid);
  }

  public static void acb_mul_fmpz(Complex z, Complex x, long y, int prec) {
    arblibJNI.acb_mul_fmpz(Complex.getCPtr(z), z, Complex.getCPtr(x), x, y, prec);
  }

  public static void fexpr_print(SymbolicExpression expr) {
    arblibJNI.fexpr_print(SymbolicExpression.getCPtr(expr), expr);
  }

  public static String fexpr_get_str(SymbolicExpression expr) {
    return arblibJNI.fexpr_get_str(SymbolicExpression.getCPtr(expr), expr);
  }

  public static void qqbar_cache_enclosure(AlgebraicNumber res, int prec) {
    arblibJNI.qqbar_cache_enclosure(AlgebraicNumber.getCPtr(res), res, prec);
  }

  public static void qqbar_get_acb(Complex res, AlgebraicNumber x, int prec) {
    arblibJNI.qqbar_get_acb(Complex.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, prec);
  }

  public static void qqbar_get_arb(Real res, AlgebraicNumber x, int prec) {
    arblibJNI.qqbar_get_arb(Real.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, prec);
  }

  public static void qqbar_get_arb_re(Real res, AlgebraicNumber x, int prec) {
    arblibJNI.qqbar_get_arb_re(Real.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, prec);
  }

  public static void qqbar_get_arb_im(Real res, AlgebraicNumber x, int prec) {
    arblibJNI.qqbar_get_arb_im(Real.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, prec);
  }

  public static void qqbar_neg(AlgebraicNumber res, AlgebraicNumber x) {
    arblibJNI.qqbar_neg(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x);
  }

  public static void qqbar_add(AlgebraicNumber res, AlgebraicNumber x, AlgebraicNumber y) {
    arblibJNI.qqbar_add(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_add_fmpq(AlgebraicNumber res, AlgebraicNumber x, Fraction y) {
    arblibJNI.qqbar_add_fmpq(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, Fraction.getCPtr(y), y);
  }

  public static void qqbar_add_fmpz(AlgebraicNumber res, AlgebraicNumber x, long y) {
    arblibJNI.qqbar_add_fmpz(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_add_ui(AlgebraicNumber res, AlgebraicNumber x, long y) {
    arblibJNI.qqbar_add_ui(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_add_si(AlgebraicNumber res, AlgebraicNumber x, int y) {
    arblibJNI.qqbar_add_si(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_sub(AlgebraicNumber res, AlgebraicNumber x, AlgebraicNumber y) {
    arblibJNI.qqbar_sub(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_sub_fmpq(AlgebraicNumber res, AlgebraicNumber x, Fraction y) {
    arblibJNI.qqbar_sub_fmpq(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, Fraction.getCPtr(y), y);
  }

  public static void qqbar_sub_fmpz(AlgebraicNumber res, AlgebraicNumber x, long y) {
    arblibJNI.qqbar_sub_fmpz(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_sub_ui(AlgebraicNumber res, AlgebraicNumber x, long y) {
    arblibJNI.qqbar_sub_ui(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_sub_si(AlgebraicNumber res, AlgebraicNumber x, int y) {
    arblibJNI.qqbar_sub_si(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_fmpq_sub(AlgebraicNumber res, Fraction x, AlgebraicNumber y) {
    arblibJNI.qqbar_fmpq_sub(AlgebraicNumber.getCPtr(res), res, Fraction.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_fmpz_sub(AlgebraicNumber res, long x, AlgebraicNumber y) {
    arblibJNI.qqbar_fmpz_sub(AlgebraicNumber.getCPtr(res), res, x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_ui_sub(AlgebraicNumber res, long x, AlgebraicNumber y) {
    arblibJNI.qqbar_ui_sub(AlgebraicNumber.getCPtr(res), res, x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_si_sub(AlgebraicNumber res, int x, AlgebraicNumber y) {
    arblibJNI.qqbar_si_sub(AlgebraicNumber.getCPtr(res), res, x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void acb_pow_fmpz(Complex y, Complex b, long e, int prec) {
    arblibJNI.acb_pow_fmpz(Complex.getCPtr(y), y, Complex.getCPtr(b), b, e, prec);
  }

  public static int qqbar_equal(AlgebraicNumber x, AlgebraicNumber y) {
    return arblibJNI.qqbar_equal(AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static int qqbar_cmp_re(AlgebraicNumber x, AlgebraicNumber y) {
    return arblibJNI.qqbar_cmp_re(AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static int qqbar_cmp_im(AlgebraicNumber x, AlgebraicNumber y) {
    return arblibJNI.qqbar_cmp_im(AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static int qqbar_cmpabs_re(AlgebraicNumber x, AlgebraicNumber y) {
    return arblibJNI.qqbar_cmpabs_re(AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static int qqbar_cmpabs_im(AlgebraicNumber x, AlgebraicNumber y) {
    return arblibJNI.qqbar_cmpabs_im(AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static int qqbar_cmpabs(AlgebraicNumber x, AlgebraicNumber y) {
    return arblibJNI.qqbar_cmpabs(AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static int qqbar_cmp_root_order(AlgebraicNumber x, AlgebraicNumber y) {
    return arblibJNI.qqbar_cmp_root_order(AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static long qqbar_hash(AlgebraicNumber x) {
    return arblibJNI.qqbar_hash(AlgebraicNumber.getCPtr(x), x);
  }

  public static void qqbar_mul(AlgebraicNumber res, AlgebraicNumber x, AlgebraicNumber y) {
    arblibJNI.qqbar_mul(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_mul_fmpq(AlgebraicNumber res, AlgebraicNumber x, Fraction y) {
    arblibJNI.qqbar_mul_fmpq(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, Fraction.getCPtr(y), y);
  }

  public static void qqbar_mul_fmpz(AlgebraicNumber res, AlgebraicNumber x, long y) {
    arblibJNI.qqbar_mul_fmpz(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_mul_ui(AlgebraicNumber res, AlgebraicNumber x, long y) {
    arblibJNI.qqbar_mul_ui(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_mul_si(AlgebraicNumber res, AlgebraicNumber x, int y) {
    arblibJNI.qqbar_mul_si(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_div(AlgebraicNumber res, AlgebraicNumber x, AlgebraicNumber y) {
    arblibJNI.qqbar_div(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_div_fmpq(AlgebraicNumber res, AlgebraicNumber x, Fraction y) {
    arblibJNI.qqbar_div_fmpq(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, Fraction.getCPtr(y), y);
  }

  public static void qqbar_div_fmpz(AlgebraicNumber res, AlgebraicNumber x, long y) {
    arblibJNI.qqbar_div_fmpz(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_div_ui(AlgebraicNumber res, AlgebraicNumber x, long y) {
    arblibJNI.qqbar_div_ui(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_div_si(AlgebraicNumber res, AlgebraicNumber x, int y) {
    arblibJNI.qqbar_div_si(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, y);
  }

  public static void qqbar_fmpq_div(AlgebraicNumber res, Fraction x, AlgebraicNumber y) {
    arblibJNI.qqbar_fmpq_div(AlgebraicNumber.getCPtr(res), res, Fraction.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_fmpz_div(AlgebraicNumber res, long x, AlgebraicNumber y) {
    arblibJNI.qqbar_fmpz_div(AlgebraicNumber.getCPtr(res), res, x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_ui_div(AlgebraicNumber res, long x, AlgebraicNumber y) {
    arblibJNI.qqbar_ui_div(AlgebraicNumber.getCPtr(res), res, x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_si_div(AlgebraicNumber res, int x, AlgebraicNumber y) {
    arblibJNI.qqbar_si_div(AlgebraicNumber.getCPtr(res), res, x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_sqr(AlgebraicNumber res, AlgebraicNumber x) {
    arblibJNI.qqbar_sqr(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x);
  }

  public static void qqbar_inv(AlgebraicNumber res, AlgebraicNumber x) {
    arblibJNI.qqbar_inv(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x);
  }

  public static void qqbar_mul_2exp_si(AlgebraicNumber res, AlgebraicNumber x, int exp) {
    arblibJNI.qqbar_mul_2exp_si(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, exp);
  }

  public static void qqbar_pow_ui(AlgebraicNumber res, AlgebraicNumber x, long e) {
    arblibJNI.qqbar_pow_ui(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, e);
  }

  public static void qqbar_pow_si(AlgebraicNumber res, AlgebraicNumber x, int n) {
    arblibJNI.qqbar_pow_si(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, n);
  }

  public static void qqbar_pow_fmpz(AlgebraicNumber res, AlgebraicNumber x, long n) {
    arblibJNI.qqbar_pow_fmpz(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, n);
  }

  public static void qqbar_pow_fmpq(AlgebraicNumber res, AlgebraicNumber x, Fraction n) {
    arblibJNI.qqbar_pow_fmpq(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, Fraction.getCPtr(n), n);
  }

  public static int qqbar_pow(AlgebraicNumber res, AlgebraicNumber x, AlgebraicNumber e) {
    return arblibJNI.qqbar_pow(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(e), e);
  }

  public static int _qqbar_fast_detect_simple_principal_surd(AlgebraicNumber x) {
    return arblibJNI._qqbar_fast_detect_simple_principal_surd(AlgebraicNumber.getCPtr(x), x);
  }

  public static void qqbar_root_ui(AlgebraicNumber res, AlgebraicNumber x, long n) {
    arblibJNI.qqbar_root_ui(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, n);
  }

  public static void qqbar_sqrt(AlgebraicNumber res, AlgebraicNumber x) {
    arblibJNI.qqbar_sqrt(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x);
  }

  public static void qqbar_sqrt_ui(AlgebraicNumber res, long x) {
    arblibJNI.qqbar_sqrt_ui(AlgebraicNumber.getCPtr(res), res, x);
  }

  public static void qqbar_rsqrt(AlgebraicNumber res, AlgebraicNumber x) {
    arblibJNI.qqbar_rsqrt(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x);
  }

  public static void qqbar_fmpq_root_ui(AlgebraicNumber res, Fraction x, long b) {
    arblibJNI.qqbar_fmpq_root_ui(AlgebraicNumber.getCPtr(res), res, Fraction.getCPtr(x), x, b);
  }

  public static void qqbar_fmpq_pow_si_ui(AlgebraicNumber res, Fraction x, int a, long b) {
    arblibJNI.qqbar_fmpq_pow_si_ui(AlgebraicNumber.getCPtr(res), res, Fraction.getCPtr(x), x, a, b);
  }

  public static void qqbar_swap(AlgebraicNumber x, AlgebraicNumber y) {
    arblibJNI.qqbar_swap(AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static void qqbar_set(AlgebraicNumber res, AlgebraicNumber x) {
    arblibJNI.qqbar_set(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x);
  }

  public static void qqbar_set_si(AlgebraicNumber res, int x) {
    arblibJNI.qqbar_set_si(AlgebraicNumber.getCPtr(res), res, x);
  }

  public static void qqbar_set_ui(AlgebraicNumber res, long x) {
    arblibJNI.qqbar_set_ui(AlgebraicNumber.getCPtr(res), res, x);
  }

  public static void qqbar_set_fmpz(AlgebraicNumber res, long x) {
    arblibJNI.qqbar_set_fmpz(AlgebraicNumber.getCPtr(res), res, x);
  }

  public static void qqbar_set_fmpq(AlgebraicNumber res, Fraction x) {
    arblibJNI.qqbar_set_fmpq(AlgebraicNumber.getCPtr(res), res, Fraction.getCPtr(x), x);
  }

  public static void qqbar_set_re_im(AlgebraicNumber res, AlgebraicNumber x, AlgebraicNumber y) {
    arblibJNI.qqbar_set_re_im(AlgebraicNumber.getCPtr(res), res, AlgebraicNumber.getCPtr(x), x, AlgebraicNumber.getCPtr(y), y);
  }

  public static int qqbar_set_d(AlgebraicNumber res, double x) {
    return arblibJNI.qqbar_set_d(AlgebraicNumber.getCPtr(res), res, x);
  }

  public static int qqbar_set_re_im_d(AlgebraicNumber res, double x, double y) {
    return arblibJNI.qqbar_set_re_im_d(AlgebraicNumber.getCPtr(res), res, x, y);
  }

  public static void qqbar_init(AlgebraicNumber res) {
    arblibJNI.qqbar_init(AlgebraicNumber.getCPtr(res), res);
  }

  public static void qqbar_clear(AlgebraicNumber res) {
    arblibJNI.qqbar_clear(AlgebraicNumber.getCPtr(res), res);
  }

  public static long n_nth_prime(long n) {
    return arblibJNI.n_nth_prime(n);
  }

  public static int fmpq_sgn(Fraction x) {
    return arblibJNI.fmpq_sgn(Fraction.getCPtr(x), x);
  }

  public static void fmpz_poly_q_inv(RationalFunction rop, RationalFunction op) {
    arblibJNI.fmpz_poly_q_inv(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op);
  }

  public static int fmpq_is_canonical(Fraction x) {
    return arblibJNI.fmpq_is_canonical(Fraction.getCPtr(x), x);
  }

  public static double fmpq_get_d(Fraction a) {
    return arblibJNI.fmpq_get_d(Fraction.getCPtr(a), a);
  }

  public static void arb_hypgeom_pfq(Real res, Real a, int p, Real b, int q, Real z, int regularized, int prec) {
    arblibJNI.arb_hypgeom_pfq(Real.getCPtr(res), res, Real.getCPtr(a), a, p, Real.getCPtr(b), b, q, Real.getCPtr(z), z, regularized, prec);
  }

  public static void fmpz_poly_pow(IntegerPolynomial res, IntegerPolynomial poly, long e) {
    arblibJNI.fmpz_poly_pow(IntegerPolynomial.getCPtr(res), res, IntegerPolynomial.getCPtr(poly), poly, e);
  }

  public static void fmpz_poly_zero(IntegerPolynomial poly) {
    arblibJNI.fmpz_poly_zero(IntegerPolynomial.getCPtr(poly), poly);
  }

  public static void fmpz_poly_evaluate_fmpz(long res, IntegerPolynomial f, long a) {
    arblibJNI.fmpz_poly_evaluate_fmpz(res, IntegerPolynomial.getCPtr(f), f, a);
  }

  public static int fmpq_pow_fmpz(Fraction a, Fraction b, long e) {
    return arblibJNI.fmpq_pow_fmpz(Fraction.getCPtr(a), a, Fraction.getCPtr(b), b, e);
  }

  public static void fmpq_set(Fraction dest, Fraction src) {
    arblibJNI.fmpq_set(Fraction.getCPtr(dest), dest, Fraction.getCPtr(src), src);
  }

  public static void fmpq_add_fmpz(Fraction res, Fraction op1, long numCols) {
    arblibJNI.fmpq_add_fmpz(Fraction.getCPtr(res), res, Fraction.getCPtr(op1), op1, numCols);
  }

  public static void fmpq_inv(Fraction dest, Fraction src) {
    arblibJNI.fmpq_inv(Fraction.getCPtr(dest), dest, Fraction.getCPtr(src), src);
  }

  public static void fmpz_poly_q_scalar_mul_fmpq(RationalFunction rop, RationalFunction op, Fraction x) {
    arblibJNI.fmpz_poly_q_scalar_mul_fmpq(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op, Fraction.getCPtr(x), x);
  }

  public static void fmpz_poly_q_scalar_div_si(RationalFunction rop, RationalFunction op, int x) {
    arblibJNI.fmpz_poly_q_scalar_div_si(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op, x);
  }

  public static void fmpz_poly_q_scalar_div_fmpz(RationalFunction rop, RationalFunction op, long x) {
    arblibJNI.fmpz_poly_q_scalar_div_fmpz(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op, x);
  }

  public static void fmpz_poly_q_scalar_div_fmpq(RationalFunction rop, RationalFunction op, Fraction x) {
    arblibJNI.fmpz_poly_q_scalar_div_fmpq(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op, Fraction.getCPtr(x), x);
  }

  public static int fmpq_is_zero(Fraction x) {
    return arblibJNI.fmpq_is_zero(Fraction.getCPtr(x), x);
  }

  public static void fmpz_poly_set_coeff_ui(IntegerPolynomial poly, int n, long x) {
    arblibJNI.fmpz_poly_set_coeff_ui(IntegerPolynomial.getCPtr(poly), poly, n, x);
  }

  public static void fmpz_poly_set_coeff_fmpz(IntegerPolynomial poly, int n, long x) {
    arblibJNI.fmpz_poly_set_coeff_fmpz(IntegerPolynomial.getCPtr(poly), poly, n, x);
  }

  public static void fmpq_set_si(Fraction res, int p, long q) {
    arblibJNI.fmpq_set_si(Fraction.getCPtr(res), res, p, q);
  }

  public static void fmpq_set_ui(Fraction res, long p, long q) {
    arblibJNI.fmpq_set_ui(Fraction.getCPtr(res), res, p, q);
  }

  public static void fmpq_set_fmpz(Fraction q, long n) {
    arblibJNI.fmpq_set_fmpz(Fraction.getCPtr(q), q, n);
  }

  public static void fmpq_init(Fraction x) {
    arblibJNI.fmpq_init(Fraction.getCPtr(x), x);
  }

  public static void arf_get_fmpq(Fraction y, Float x) {
    arblibJNI.arf_get_fmpq(Fraction.getCPtr(y), y, Float.getCPtr(x), x);
  }

  public static void fmpq_div_fmpz(Fraction res, Fraction op, long x) {
    arblibJNI.fmpq_div_fmpz(Fraction.getCPtr(res), res, Fraction.getCPtr(op), op, x);
  }

  public static void fmpq_mul_fmpz(Fraction res, Fraction op, long x) {
    arblibJNI.fmpq_mul_fmpz(Fraction.getCPtr(res), res, Fraction.getCPtr(op), op, x);
  }

  public static int fmpz_is_zero(long f) {
    return arblibJNI.fmpz_is_zero(f);
  }

  public static int arf_set_fmpq(Float y, Fraction x, int prec, int rnd) {
    return arblibJNI.arf_set_fmpq(Float.getCPtr(y), y, Fraction.getCPtr(x), x, prec, rnd);
  }

  public static void arb_set_fmpq(Real y, Fraction x, int prec) {
    arblibJNI.arb_set_fmpq(Real.getCPtr(y), y, Fraction.getCPtr(x), x, prec);
  }

  public static void fmpq_zero(Fraction res) {
    arblibJNI.fmpq_zero(Fraction.getCPtr(res), res);
  }

  public static void fmpq_canonicalise(Fraction res) {
    arblibJNI.fmpq_canonicalise(Fraction.getCPtr(res), res);
  }

  public static void fmpz_poly_init2(IntegerPolynomial poly, int alloc) {
    arblibJNI.fmpz_poly_init2(IntegerPolynomial.getCPtr(poly), poly, alloc);
  }

  public static void fmpz_poly_realloc(IntegerPolynomial poly, int alloc) {
    arblibJNI.fmpz_poly_realloc(IntegerPolynomial.getCPtr(poly), poly, alloc);
  }

  public static void fmpz_poly_fit_length(IntegerPolynomial poly, int len) {
    arblibJNI.fmpz_poly_fit_length(IntegerPolynomial.getCPtr(poly), poly, len);
  }

  public static void fmpz_poly_clear(IntegerPolynomial poly) {
    arblibJNI.fmpz_poly_clear(IntegerPolynomial.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_normalise(IntegerPolynomial poly) {
    arblibJNI._fmpz_poly_normalise(IntegerPolynomial.getCPtr(poly), poly);
  }

  public static void _fmpz_poly_set_length(IntegerPolynomial poly, int newlen) {
    arblibJNI._fmpz_poly_set_length(IntegerPolynomial.getCPtr(poly), poly, newlen);
  }

  public static int fmpz_poly_get_coeff_si(IntegerPolynomial poly, int n) {
    return arblibJNI.fmpz_poly_get_coeff_si(IntegerPolynomial.getCPtr(poly), poly, n);
  }

  public static void fmpz_poly_set_coeff_si(IntegerPolynomial poly, int n, int x) {
    arblibJNI.fmpz_poly_set_coeff_si(IntegerPolynomial.getCPtr(poly), poly, n, x);
  }

  public static long fmpz_poly_get_coeff_ui(IntegerPolynomial poly, int n) {
    return arblibJNI.fmpz_poly_get_coeff_ui(IntegerPolynomial.getCPtr(poly), poly, n);
  }

  public static void fmpz_poly_get_coeff_fmpz(long x, IntegerPolynomial poly, int n) {
    arblibJNI.fmpz_poly_get_coeff_fmpz(x, IntegerPolynomial.getCPtr(poly), poly, n);
  }

  public static int fmpz_poly_q_equal(RationalFunction op1, RationalFunction op2) {
    return arblibJNI.fmpz_poly_q_equal(RationalFunction.getCPtr(op1), op1, RationalFunction.getCPtr(op2), op2);
  }

  public static int fmpz_poly_q_is_one(RationalFunction op) {
    return arblibJNI.fmpz_poly_q_is_one(RationalFunction.getCPtr(op), op);
  }

  public static int fmpz_poly_q_is_zero(RationalFunction op) {
    return arblibJNI.fmpz_poly_q_is_zero(RationalFunction.getCPtr(op), op);
  }

  public static void fmpz_poly_q_zero(RationalFunction rop) {
    arblibJNI.fmpz_poly_q_zero(RationalFunction.getCPtr(rop), rop);
  }

  public static void fmpz_poly_q_one(RationalFunction rop) {
    arblibJNI.fmpz_poly_q_one(RationalFunction.getCPtr(rop), rop);
  }

  public static String fmpz_poly_q_get_str(RationalFunction op) {
    return arblibJNI.fmpz_poly_q_get_str(RationalFunction.getCPtr(op), op);
  }

  public static String fmpz_poly_q_get_str_pretty(RationalFunction op, String x) {
    return arblibJNI.fmpz_poly_q_get_str_pretty(RationalFunction.getCPtr(op), op, x);
  }

  public static void fmpz_poly_q_add_in_place(RationalFunction rop, RationalFunction op) {
    arblibJNI.fmpz_poly_q_add_in_place(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op);
  }

  public static void fmpz_poly_q_sub_in_place(RationalFunction rop, RationalFunction op) {
    arblibJNI.fmpz_poly_q_sub_in_place(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op);
  }

  public static void fmpz_poly_q_add(RationalFunction rop, RationalFunction op1, RationalFunction op2) {
    arblibJNI.fmpz_poly_q_add(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op1), op1, RationalFunction.getCPtr(op2), op2);
  }

  public static void fmpz_poly_q_sub(RationalFunction rop, RationalFunction op1, RationalFunction op2) {
    arblibJNI.fmpz_poly_q_sub(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op1), op1, RationalFunction.getCPtr(op2), op2);
  }

  public static void fmpz_poly_q_addmul(RationalFunction rop, RationalFunction op1, RationalFunction op2) {
    arblibJNI.fmpz_poly_q_addmul(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op1), op1, RationalFunction.getCPtr(op2), op2);
  }

  public static void fmpz_poly_q_submul(RationalFunction rop, RationalFunction op1, RationalFunction op2) {
    arblibJNI.fmpz_poly_q_submul(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op1), op1, RationalFunction.getCPtr(op2), op2);
  }

  public static void fmpz_poly_q_scalar_mul_si(RationalFunction rop, RationalFunction op, int x) {
    arblibJNI.fmpz_poly_q_scalar_mul_si(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op, x);
  }

  public static void fmpz_poly_q_scalar_mul_fmpz(RationalFunction rop, RationalFunction op, long x) {
    arblibJNI.fmpz_poly_q_scalar_mul_fmpz(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op, x);
  }

  public static void fmpz_poly_q_mul(RationalFunction rop, RationalFunction op1, RationalFunction op2) {
    arblibJNI.fmpz_poly_q_mul(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op1), op1, RationalFunction.getCPtr(op2), op2);
  }

  public static void fmpz_poly_q_div(RationalFunction rop, RationalFunction op1, RationalFunction op2) {
    arblibJNI.fmpz_poly_q_div(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op1), op1, RationalFunction.getCPtr(op2), op2);
  }

  public static void fmpz_poly_q_pow(RationalFunction rop, RationalFunction op, long exp) {
    arblibJNI.fmpz_poly_q_pow(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op, exp);
  }

  public static void fmpz_poly_q_derivative(RationalFunction rop, RationalFunction op) {
    arblibJNI.fmpz_poly_q_derivative(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op);
  }

  public static int fmpz_poly_q_evaluate_fmpq(Fraction rop, RationalFunction f, Fraction a) {
    return arblibJNI.fmpz_poly_q_evaluate_fmpq(Fraction.getCPtr(rop), rop, RationalFunction.getCPtr(f), f, Fraction.getCPtr(a), a);
  }

  public static void fmpz_poly_q_canonicalise(RationalFunction rop) {
    arblibJNI.fmpz_poly_q_canonicalise(RationalFunction.getCPtr(rop), rop);
  }

  public static int fmpz_poly_q_is_canonical(RationalFunction op) {
    return arblibJNI.fmpz_poly_q_is_canonical(RationalFunction.getCPtr(op), op);
  }

  public static void fmpz_poly_q_init(RationalFunction rop) {
    arblibJNI.fmpz_poly_q_init(RationalFunction.getCPtr(rop), rop);
  }

  public static void fmpz_poly_q_clear(RationalFunction rop) {
    arblibJNI.fmpz_poly_q_clear(RationalFunction.getCPtr(rop), rop);
  }

  public static void fmpz_poly_q_neg(RationalFunction rop, RationalFunction op) {
    arblibJNI.fmpz_poly_q_neg(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op);
  }

  public static void fmpz_poly_q_set(RationalFunction rop, RationalFunction op) {
    arblibJNI.fmpz_poly_q_set(RationalFunction.getCPtr(rop), rop, RationalFunction.getCPtr(op), op);
  }

  public static void fmpz_poly_q_set_si(RationalFunction rop, int op) {
    arblibJNI.fmpz_poly_q_set_si(RationalFunction.getCPtr(rop), rop, op);
  }

  public static void fmpz_poly_q_swap(RationalFunction op1, RationalFunction op2) {
    arblibJNI.fmpz_poly_q_swap(RationalFunction.getCPtr(op1), op1, RationalFunction.getCPtr(op2), op2);
  }

  public static void fmpz_poly_divrem(IntegerPolynomial Q, IntegerPolynomial R, IntegerPolynomial A, IntegerPolynomial B) {
    arblibJNI.fmpz_poly_divrem(IntegerPolynomial.getCPtr(Q), Q, IntegerPolynomial.getCPtr(R), R, IntegerPolynomial.getCPtr(A), A, IntegerPolynomial.getCPtr(B), B);
  }

  public static String fmpz_poly_get_str_pretty(IntegerPolynomial poly, String x) {
    return arblibJNI.fmpz_poly_get_str_pretty(IntegerPolynomial.getCPtr(poly), poly, x);
  }

  public static void fmpz_poly_div(IntegerPolynomial Q, IntegerPolynomial A, IntegerPolynomial B) {
    arblibJNI.fmpz_poly_div(IntegerPolynomial.getCPtr(Q), Q, IntegerPolynomial.getCPtr(A), A, IntegerPolynomial.getCPtr(B), B);
  }

  public static void fmpz_poly_mul(IntegerPolynomial res, IntegerPolynomial poly1, IntegerPolynomial poly2) {
    arblibJNI.fmpz_poly_mul(IntegerPolynomial.getCPtr(res), res, IntegerPolynomial.getCPtr(poly1), poly1, IntegerPolynomial.getCPtr(poly2), poly2);
  }

  public static void fmpz_poly_sub(IntegerPolynomial res, IntegerPolynomial poly1, IntegerPolynomial poly2) {
    arblibJNI.fmpz_poly_sub(IntegerPolynomial.getCPtr(res), res, IntegerPolynomial.getCPtr(poly1), poly1, IntegerPolynomial.getCPtr(poly2), poly2);
  }

  public static void fmpz_poly_sub_series(IntegerPolynomial res, IntegerPolynomial poly1, IntegerPolynomial poly2, int n) {
    arblibJNI.fmpz_poly_sub_series(IntegerPolynomial.getCPtr(res), res, IntegerPolynomial.getCPtr(poly1), poly1, IntegerPolynomial.getCPtr(poly2), poly2, n);
  }

  public static void fmpz_poly_neg(IntegerPolynomial res, IntegerPolynomial poly) {
    arblibJNI.fmpz_poly_neg(IntegerPolynomial.getCPtr(res), res, IntegerPolynomial.getCPtr(poly), poly);
  }

  public static void fmpz_poly_add_si(IntegerPolynomial res, IntegerPolynomial poly, int numCols) {
    arblibJNI.fmpz_poly_add_si(IntegerPolynomial.getCPtr(res), res, IntegerPolynomial.getCPtr(poly), poly, numCols);
  }

  public static void fmpz_poly_sub_si(IntegerPolynomial res, IntegerPolynomial poly, int numCols) {
    arblibJNI.fmpz_poly_sub_si(IntegerPolynomial.getCPtr(res), res, IntegerPolynomial.getCPtr(poly), poly, numCols);
  }

  public static void fmpz_poly_si_sub(IntegerPolynomial res, int numCols, IntegerPolynomial poly) {
    arblibJNI.fmpz_poly_si_sub(IntegerPolynomial.getCPtr(res), res, numCols, IntegerPolynomial.getCPtr(poly), poly);
  }

  public static void fmpz_poly_add_fmpz(IntegerPolynomial res, IntegerPolynomial poly, long numCols) {
    arblibJNI.fmpz_poly_add_fmpz(IntegerPolynomial.getCPtr(res), res, IntegerPolynomial.getCPtr(poly), poly, numCols);
  }

  public static void fmpz_poly_sub_fmpz(IntegerPolynomial res, IntegerPolynomial poly, long numCols) {
    arblibJNI.fmpz_poly_sub_fmpz(IntegerPolynomial.getCPtr(res), res, IntegerPolynomial.getCPtr(poly), poly, numCols);
  }

  public static void fmpz_poly_fmpz_sub(IntegerPolynomial res, long numCols, IntegerPolynomial poly) {
    arblibJNI.fmpz_poly_fmpz_sub(IntegerPolynomial.getCPtr(res), res, numCols, IntegerPolynomial.getCPtr(poly), poly);
  }

  public static void fmpz_poly_set(IntegerPolynomial poly1, IntegerPolynomial poly2) {
    arblibJNI.fmpz_poly_set(IntegerPolynomial.getCPtr(poly1), poly1, IntegerPolynomial.getCPtr(poly2), poly2);
  }

  public static void fmpz_poly_set_ui(IntegerPolynomial poly, long numCols) {
    arblibJNI.fmpz_poly_set_ui(IntegerPolynomial.getCPtr(poly), poly, numCols);
  }

  public static void fmpz_poly_set_si(IntegerPolynomial poly, int numCols) {
    arblibJNI.fmpz_poly_set_si(IntegerPolynomial.getCPtr(poly), poly, numCols);
  }

  public static void fmpz_poly_set_fmpz(IntegerPolynomial poly, long numCols) {
    arblibJNI.fmpz_poly_set_fmpz(IntegerPolynomial.getCPtr(poly), poly, numCols);
  }

  public static int fmpz_poly_equal(IntegerPolynomial poly1, IntegerPolynomial poly2) {
    return arblibJNI.fmpz_poly_equal(IntegerPolynomial.getCPtr(poly1), poly1, IntegerPolynomial.getCPtr(poly2), poly2);
  }

  public static int fmpz_poly_equal_fmpz(IntegerPolynomial poly, long numCols) {
    return arblibJNI.fmpz_poly_equal_fmpz(IntegerPolynomial.getCPtr(poly), poly, numCols);
  }

  public static void fmpz_poly_add(IntegerPolynomial res, IntegerPolynomial poly1, IntegerPolynomial poly2) {
    arblibJNI.fmpz_poly_add(IntegerPolynomial.getCPtr(res), res, IntegerPolynomial.getCPtr(poly1), poly1, IntegerPolynomial.getCPtr(poly2), poly2);
  }

  public static String fmpz_poly_get_str(IntegerPolynomial poly) {
    return arblibJNI.fmpz_poly_get_str(IntegerPolynomial.getCPtr(poly), poly);
  }

  public static int fmpz_poly_set_str(IntegerPolynomial poly, String str) {
    return arblibJNI.fmpz_poly_set_str(IntegerPolynomial.getCPtr(poly), poly, str);
  }

  public static int fmpq_equal(Fraction x, Fraction y) {
    return arblibJNI.fmpq_equal(Fraction.getCPtr(x), x, Fraction.getCPtr(y), y);
  }

  public static void acb_poly_neg(ComplexPolynomial res, ComplexPolynomial poly) {
    arblibJNI.acb_poly_neg(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly), poly);
  }

  public static void acb_gamma(Complex y, Complex x, int prec) {
    arblibJNI.acb_gamma(Complex.getCPtr(y), y, Complex.getCPtr(x), x, prec);
  }

  public static void acb_rgamma(Complex y, Complex x, int prec) {
    arblibJNI.acb_rgamma(Complex.getCPtr(y), y, Complex.getCPtr(x), x, prec);
  }

  public static void acb_lgamma(Complex y, Complex x, int prec) {
    arblibJNI.acb_lgamma(Complex.getCPtr(y), y, Complex.getCPtr(x), x, prec);
  }

  public static void acb_log_sin_pi(Complex res, Complex z, int prec) {
    arblibJNI.acb_log_sin_pi(Complex.getCPtr(res), res, Complex.getCPtr(z), z, prec);
  }

  public static void acb_digamma(Complex y, Complex x, int prec) {
    arblibJNI.acb_digamma(Complex.getCPtr(y), y, Complex.getCPtr(x), x, prec);
  }

  public static void acb_zeta(Complex z, Complex s, int prec) {
    arblibJNI.acb_zeta(Complex.getCPtr(z), z, Complex.getCPtr(s), s, prec);
  }

  public static void acb_hurwitz_zeta(Complex z, Complex s, Complex a, int prec) {
    arblibJNI.acb_hurwitz_zeta(Complex.getCPtr(z), z, Complex.getCPtr(s), s, Complex.getCPtr(a), a, prec);
  }

  public static void acb_polygamma(Complex res, Complex s, Complex z, int prec) {
    arblibJNI.acb_polygamma(Complex.getCPtr(res), res, Complex.getCPtr(s), s, Complex.getCPtr(z), z, prec);
  }

  public static int acb_poly_equal(ComplexPolynomial A, ComplexPolynomial B) {
    return arblibJNI.acb_poly_equal(ComplexPolynomial.getCPtr(A), A, ComplexPolynomial.getCPtr(B), B);
  }

  public static void acb_poly_add(ComplexPolynomial res, ComplexPolynomial poly1, ComplexPolynomial poly2, int prec) {
    arblibJNI.acb_poly_add(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly1), poly1, ComplexPolynomial.getCPtr(poly2), poly2, prec);
  }

  public static void acb_hypgeom_rising_ui(Complex y, Complex x, long n, int prec) {
    arblibJNI.acb_hypgeom_rising_ui(Complex.getCPtr(y), y, Complex.getCPtr(x), x, n, prec);
  }

  public static void acb_hypgeom_rising(Complex y, Complex x, Complex n, int prec) {
    arblibJNI.acb_hypgeom_rising(Complex.getCPtr(y), y, Complex.getCPtr(x), x, Complex.getCPtr(n), n, prec);
  }

  public static void acb_poly_pow_ui(ComplexPolynomial res, ComplexPolynomial poly, long exp, int prec) {
    arblibJNI.acb_poly_pow_ui(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly), poly, exp, prec);
  }

  public static void acb_div_fmpz(Complex z, Complex x, long numCols, int prec) {
    arblibJNI.acb_div_fmpz(Complex.getCPtr(z), z, Complex.getCPtr(x), x, numCols, prec);
  }

  public static void acb_poly_scalar_div(ComplexPolynomial res, ComplexPolynomial poly, Complex numCols, int prec) {
    arblibJNI.acb_poly_scalar_div(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly), poly, Complex.getCPtr(numCols), numCols, prec);
  }

  public static void acb_poly_set_si(ComplexPolynomial poly, int numCols) {
    arblibJNI.acb_poly_set_si(ComplexPolynomial.getCPtr(poly), poly, numCols);
  }

  public static int acb_poly_divrem(ComplexPolynomial Q, ComplexPolynomial R, ComplexPolynomial A, ComplexPolynomial B, int prec) {
    return arblibJNI.acb_poly_divrem(ComplexPolynomial.getCPtr(Q), Q, ComplexPolynomial.getCPtr(R), R, ComplexPolynomial.getCPtr(A), A, ComplexPolynomial.getCPtr(B), B, prec);
  }

  public static void fmpz_fac_ui(long f, long n) {
    arblibJNI.fmpz_fac_ui(f, n);
  }

  public static void fmpz_bin_uiui(long res, long n, long k) {
    arblibJNI.fmpz_bin_uiui(res, n, k);
  }

  public static String fmpq_get_str(String str, int b, Fraction x) {
    return arblibJNI.fmpq_get_str(str, b, Fraction.getCPtr(x), x);
  }

  public static int fmpq_set_str(Fraction dest, String s, int base) {
    return arblibJNI.fmpq_set_str(Fraction.getCPtr(dest), dest, s, base);
  }

  public static void fmpq_set_fmpz_frac(Fraction res, long p, long q) {
    arblibJNI.fmpq_set_fmpz_frac(Fraction.getCPtr(res), res, p, q);
  }

  public static void fmpq_sub(Fraction res, Fraction op1, Fraction op2) {
    arblibJNI.fmpq_sub(Fraction.getCPtr(res), res, Fraction.getCPtr(op1), op1, Fraction.getCPtr(op2), op2);
  }

  public static void fmpq_sub_si(Fraction res, Fraction op1, int numCols) {
    arblibJNI.fmpq_sub_si(Fraction.getCPtr(res), res, Fraction.getCPtr(op1), op1, numCols);
  }

  public static void fmpq_sub_ui(Fraction res, Fraction op1, long numCols) {
    arblibJNI.fmpq_sub_ui(Fraction.getCPtr(res), res, Fraction.getCPtr(op1), op1, numCols);
  }

  public static void fmpq_sub_fmpz(Fraction res, Fraction op1, long numCols) {
    arblibJNI.fmpq_sub_fmpz(Fraction.getCPtr(res), res, Fraction.getCPtr(op1), op1, numCols);
  }

  public static void fmpq_mul_ui(Fraction res, Fraction op1, long numCols) {
    arblibJNI.fmpq_mul_ui(Fraction.getCPtr(res), res, Fraction.getCPtr(op1), op1, numCols);
  }

  public static void fmpq_mul(Fraction res, Fraction op1, Fraction op2) {
    arblibJNI.fmpq_mul(Fraction.getCPtr(res), res, Fraction.getCPtr(op1), op1, Fraction.getCPtr(op2), op2);
  }

  public static void fmpq_neg(Fraction dest, Fraction src) {
    arblibJNI.fmpq_neg(Fraction.getCPtr(dest), dest, Fraction.getCPtr(src), src);
  }

  public static void fmpq_div(Fraction res, Fraction op1, Fraction op2) {
    arblibJNI.fmpq_div(Fraction.getCPtr(res), res, Fraction.getCPtr(op1), op1, Fraction.getCPtr(op2), op2);
  }

  public static void acb_poly_fit_length(ComplexPolynomial poly, int len) {
    arblibJNI.acb_poly_fit_length(ComplexPolynomial.getCPtr(poly), poly, len);
  }

  public static void acb_poly_sub(ComplexPolynomial res, ComplexPolynomial poly1, ComplexPolynomial poly2, int prec) {
    arblibJNI.acb_poly_sub(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly1), poly1, ComplexPolynomial.getCPtr(poly2), poly2, prec);
  }

  public static void acb_poly_add_si(ComplexPolynomial res, ComplexPolynomial poly, int numCols, int prec) {
    arblibJNI.acb_poly_add_si(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly), poly, numCols, prec);
  }

  public static void acb_poly_shift_right(ComplexPolynomial res, ComplexPolynomial poly, int n) {
    arblibJNI.acb_poly_shift_right(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly), poly, n);
  }

  public static void acb_poly_shift_left(ComplexPolynomial res, ComplexPolynomial poly, int n) {
    arblibJNI.acb_poly_shift_left(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly), poly, n);
  }

  public static void acb_poly_scalar_mul(ComplexPolynomial res, ComplexPolynomial poly, Complex numCols, int prec) {
    arblibJNI.acb_poly_scalar_mul(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly), poly, Complex.getCPtr(numCols), numCols, prec);
  }

  public static void arb_poly_scalar_mul(RealPolynomial res, RealPolynomial poly, Real numCols, int prec) {
    arblibJNI.arb_poly_scalar_mul(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly), poly, Real.getCPtr(numCols), numCols, prec);
  }

  public static void acb_poly_mul(ComplexPolynomial res, ComplexPolynomial poly1, ComplexPolynomial poly2, int prec) {
    arblibJNI.acb_poly_mul(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly1), poly1, ComplexPolynomial.getCPtr(poly2), poly2, prec);
  }

  public static void acb_poly_zero(ComplexPolynomial poly) {
    arblibJNI.acb_poly_zero(ComplexPolynomial.getCPtr(poly), poly);
  }

  public static void acb_poly_one(ComplexPolynomial poly) {
    arblibJNI.acb_poly_one(ComplexPolynomial.getCPtr(poly), poly);
  }

  public static void acb_poly_set_coeff_si(ComplexPolynomial poly, int n, int x) {
    arblibJNI.acb_poly_set_coeff_si(ComplexPolynomial.getCPtr(poly), poly, n, x);
  }

  public static void acb_poly_set_coeff_acb(ComplexPolynomial poly, int n, Complex x) {
    arblibJNI.acb_poly_set_coeff_acb(ComplexPolynomial.getCPtr(poly), poly, n, Complex.getCPtr(x), x);
  }

  public static void acb_poly_get_coeff_acb(Complex x, ComplexPolynomial poly, int n) {
    arblibJNI.acb_poly_get_coeff_acb(Complex.getCPtr(x), x, ComplexPolynomial.getCPtr(poly), poly, n);
  }

  public static void acb_poly_set_acb(ComplexPolynomial poly, Complex numCols) {
    arblibJNI.acb_poly_set_acb(ComplexPolynomial.getCPtr(poly), poly, Complex.getCPtr(numCols), numCols);
  }

  public static void acb_poly_set_arb_poly(ComplexPolynomial poly, RealPolynomial re) {
    arblibJNI.acb_poly_set_arb_poly(ComplexPolynomial.getCPtr(poly), poly, RealPolynomial.getCPtr(re), re);
  }

  public static void acb_sub_fmpz(Complex z, Complex x, long y, int prec) {
    arblibJNI.acb_sub_fmpz(Complex.getCPtr(z), z, Complex.getCPtr(x), x, y, prec);
  }

  public static int arb_contains_zero(Real x) {
    return arblibJNI.arb_contains_zero(Real.getCPtr(x), x);
  }

  public static int arb_is_nonzero(Real x) {
    return arblibJNI.arb_is_nonzero(Real.getCPtr(x), x);
  }

  public static int arb_is_positive(Real x) {
    return arblibJNI.arb_is_positive(Real.getCPtr(x), x);
  }

  public static int arb_is_nonnegative(Real x) {
    return arblibJNI.arb_is_nonnegative(Real.getCPtr(x), x);
  }

  public static int arb_is_negative(Real x) {
    return arblibJNI.arb_is_negative(Real.getCPtr(x), x);
  }

  public static int arb_is_nonpositive(Real x) {
    return arblibJNI.arb_is_nonpositive(Real.getCPtr(x), x);
  }

  public static int arb_contains_negative(Real x) {
    return arblibJNI.arb_contains_negative(Real.getCPtr(x), x);
  }

  public static int arb_contains_nonpositive(Real x) {
    return arblibJNI.arb_contains_nonpositive(Real.getCPtr(x), x);
  }

  public static int arb_contains_positive(Real x) {
    return arblibJNI.arb_contains_positive(Real.getCPtr(x), x);
  }

  public static int arb_contains_nonnegative(Real x) {
    return arblibJNI.arb_contains_nonnegative(Real.getCPtr(x), x);
  }

  public static void acb_poly_set(ComplexPolynomial dest, ComplexPolynomial src) {
    arblibJNI.acb_poly_set(ComplexPolynomial.getCPtr(dest), dest, ComplexPolynomial.getCPtr(src), src);
  }

  public static int arb_equal_si(Real x, int y) {
    return arblibJNI.arb_equal_si(Real.getCPtr(x), x, y);
  }

  public static void fmpz_lcm(long f, long g, long h) {
    arblibJNI.fmpz_lcm(f, g, h);
  }

  public static void fmpz_gcd(long f, long g, long h) {
    arblibJNI.fmpz_gcd(f, g, h);
  }

  public static int fmpz_kronecker(long a, long n) {
    return arblibJNI.fmpz_kronecker(a, n);
  }

  public static void fmpz_rfac_ui(long numRows, long x, long n) {
    arblibJNI.fmpz_rfac_ui(numRows, x, n);
  }

  public static void fmpz_rfac_uiui(long numRows, long x, long n) {
    arblibJNI.fmpz_rfac_uiui(numRows, x, n);
  }

  public static int fmpz_equal(long f, long g) {
    return arblibJNI.fmpz_equal(f, g);
  }

  public static void arb_poly_pow_ui(RealPolynomial res, RealPolynomial poly, long exp, int prec) {
    arblibJNI.arb_poly_pow_ui(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly), poly, exp, prec);
  }

  public static int fmpz_sgn(long f) {
    return arblibJNI.fmpz_sgn(f);
  }

  public static void fmpz_abs(long f1, long f2) {
    arblibJNI.fmpz_abs(f1, f2);
  }

  public static void fmpz_neg(long f1, long f2) {
    arblibJNI.fmpz_neg(f1, f2);
  }

  public static void fmpz_mul_ui(long f, long g, long x) {
    arblibJNI.fmpz_mul_ui(f, g, x);
  }

  public static void fmpz_mul_si(long f, long g, int x) {
    arblibJNI.fmpz_mul_si(f, g, x);
  }

  public static void fmpz_mul(long f, long g, long h) {
    arblibJNI.fmpz_mul(f, g, h);
  }

  public static long fmpz_popcnt(long a) {
    return arblibJNI.fmpz_popcnt(a);
  }

  public static void fmpz_set_ui(long f, long val) {
    arblibJNI.fmpz_set_ui(f, val);
  }

  public static int arb_is_int(Real x) {
    return arblibJNI.arb_is_int(Real.getCPtr(x), x);
  }

  public static void fmpq_add(Fraction res, Fraction op1, Fraction op2) {
    arblibJNI.fmpq_add(Fraction.getCPtr(res), res, Fraction.getCPtr(op1), op1, Fraction.getCPtr(op2), op2);
  }

  public static void arb_fac_ui(Real z, long n, int prec) {
    arblibJNI.arb_fac_ui(Real.getCPtr(z), z, n, prec);
  }

  public static void fmpz_add_si(long f, long g, int x) {
    arblibJNI.fmpz_add_si(f, g, x);
  }

  public static void arb_hypgeom_rising_ui(Real res, Real x, long n, int prec) {
    arblibJNI.arb_hypgeom_rising_ui(Real.getCPtr(res), res, Real.getCPtr(x), x, n, prec);
  }

  public static void arb_hypgeom_rising(Real res, Real x, Real n, int prec) {
    arblibJNI.arb_hypgeom_rising(Real.getCPtr(res), res, Real.getCPtr(x), x, Real.getCPtr(n), n, prec);
  }

  public static int arb_is_one(Real f) {
    return arblibJNI.arb_is_one(Real.getCPtr(f), f);
  }

  public static int fmpz_cmp(long f, long g) {
    return arblibJNI.fmpz_cmp(f, g);
  }

  public static void fmpz_sub_si(long f, long g, int x) {
    arblibJNI.fmpz_sub_si(f, g, x);
  }

  public static void arb_add_fmpz(Real z, Real x, long y, int prec) {
    arblibJNI.arb_add_fmpz(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static int fmpz_pow_fmpz(long a, long b, long e) {
    return arblibJNI.fmpz_pow_fmpz(a, b, e);
  }

  public static void arb_mul_fmpz(Real z, Real x, long y, int prec) {
    arblibJNI.arb_mul_fmpz(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_sub_fmpz(Real z, Real x, long y, int prec) {
    arblibJNI.arb_sub_fmpz(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void fmpz_divexact(long f, long g, long h) {
    arblibJNI.fmpz_divexact(f, g, h);
  }

  public static void fmpz_mod(long f, long g, long h) {
    arblibJNI.fmpz_mod(f, g, h);
  }

  public static void fmpz_add(long f, long g, long h) {
    arblibJNI.fmpz_add(f, g, h);
  }

  public static void fmpz_sub(long f, long g, long h) {
    arblibJNI.fmpz_sub(f, g, h);
  }

  public static void arb_pow_fmpz(Real y, Real b, long e, int prec) {
    arblibJNI.arb_pow_fmpz(Real.getCPtr(y), y, Real.getCPtr(b), b, e, prec);
  }

  public static void arb_div_fmpz(Real z, Real x, long y, int prec) {
    arblibJNI.arb_div_fmpz(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_poly_integral(RealPolynomial res, RealPolynomial poly, int prec) {
    arblibJNI.arb_poly_integral(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly), poly, prec);
  }

  public static void arb_poly_derivative(RealPolynomial res, RealPolynomial poly, int prec) {
    arblibJNI.arb_poly_derivative(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly), poly, prec);
  }

  public static void arb_rising(Real z, Real x, Real n, int prec) {
    arblibJNI.arb_rising(Real.getCPtr(z), z, Real.getCPtr(x), x, Real.getCPtr(n), n, prec);
  }

  public static void arb_rising_ui(Real z, Real x, long n, int prec) {
    arblibJNI.arb_rising_ui(Real.getCPtr(z), z, Real.getCPtr(x), x, n, prec);
  }

  public static int arb_poly_length(RealPolynomial poly) {
    return arblibJNI.arb_poly_length(RealPolynomial.getCPtr(poly), poly);
  }

  public static void arb_set_fmpz(Real x, long y) {
    arblibJNI.arb_set_fmpz(Real.getCPtr(x), x, y);
  }

  public static int arb_poly_is_zero(RealPolynomial z) {
    return arblibJNI.arb_poly_is_zero(RealPolynomial.getCPtr(z), z);
  }

  public static void arb_poly_neg(RealPolynomial res, RealPolynomial poly) {
    arblibJNI.arb_poly_neg(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly), poly);
  }

  public static void arb_poly_majorant(RealPolynomial res, RealPolynomial poly, int prec) {
    arblibJNI.arb_poly_majorant(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly), poly, prec);
  }

  public static int arb_poly_equal(RealPolynomial A, RealPolynomial B) {
    return arblibJNI.arb_poly_equal(RealPolynomial.getCPtr(A), A, RealPolynomial.getCPtr(B), B);
  }

  public static int arb_poly_overlaps(RealPolynomial poly1, RealPolynomial poly2) {
    return arblibJNI.arb_poly_overlaps(RealPolynomial.getCPtr(poly1), poly1, RealPolynomial.getCPtr(poly2), poly2);
  }

  public static long fmpz_get_ui(long f) {
    return arblibJNI.fmpz_get_ui(f);
  }

  public static int fmpz_get_si(long f) {
    return arblibJNI.fmpz_get_si(f);
  }

  public static void fmpz_set(long f, long g) {
    arblibJNI.fmpz_set(f, g);
  }

  public static void fmpz_set_si(long f, int val) {
    arblibJNI.fmpz_set_si(f, val);
  }

  public static int fmpz_set_str(long f, String str, int b) {
    return arblibJNI.fmpz_set_str(f, str, b);
  }

  public static String fmpz_get_str(String str, int b, long f) {
    return arblibJNI.fmpz_get_str(str, b, f);
  }

  public static void fmpz_init(long f) {
    arblibJNI.fmpz_init(f);
  }

  public static void fmpz_clear(long f) {
    arblibJNI.fmpz_clear(f);
  }

  public static void fmpz_init2(long f, long limbs) {
    arblibJNI.fmpz_init2(f, limbs);
  }

  public static int arf_bits(Float x) {
    return arblibJNI.arf_bits(Float.getCPtr(x), x);
  }

  public static void arb_poly_div_series(RealPolynomial Q, RealPolynomial A, RealPolynomial B, int n, int prec) {
    arblibJNI.arb_poly_div_series(RealPolynomial.getCPtr(Q), Q, RealPolynomial.getCPtr(A), A, RealPolynomial.getCPtr(B), B, n, prec);
  }

  public static int arb_poly_divrem(RealPolynomial Q, RealPolynomial R, RealPolynomial A, RealPolynomial B, int prec) {
    return arblibJNI.arb_poly_divrem(RealPolynomial.getCPtr(Q), Q, RealPolynomial.getCPtr(R), R, RealPolynomial.getCPtr(A), A, RealPolynomial.getCPtr(B), B, prec);
  }

  public static void arb_poly_get_coeff_ptr(RealPolynomial poly, int n) {
    arblibJNI.arb_poly_get_coeff_ptr(RealPolynomial.getCPtr(poly), poly, n);
  }

  public static void arb_poly_get_coeff_arb(Real v, RealPolynomial poly, int n) {
    arblibJNI.arb_poly_get_coeff_arb(Real.getCPtr(v), v, RealPolynomial.getCPtr(poly), poly, n);
  }

  public static void arb_poly_set_coeff_arb(RealPolynomial poly, int n, Real numCols) {
    arblibJNI.arb_poly_set_coeff_arb(RealPolynomial.getCPtr(poly), poly, n, Real.getCPtr(numCols), numCols);
  }

  public static void arb_poly_set_coeff_si(RealPolynomial poly, int n, int numCols) {
    arblibJNI.arb_poly_set_coeff_si(RealPolynomial.getCPtr(poly), poly, n, numCols);
  }

  public static void arb_poly_set(RealPolynomial dest, RealPolynomial src) {
    arblibJNI.arb_poly_set(RealPolynomial.getCPtr(dest), dest, RealPolynomial.getCPtr(src), src);
  }

  public static void _arb_poly_set_length(RealPolynomial poly, int len) {
    arblibJNI._arb_poly_set_length(RealPolynomial.getCPtr(poly), poly, len);
  }

  public static void _arb_poly_normalise(RealPolynomial poly) {
    arblibJNI._arb_poly_normalise(RealPolynomial.getCPtr(poly), poly);
  }

  public static void arb_poly_scalar_div(RealPolynomial res, RealPolynomial poly, Real numCols, int prec) {
    arblibJNI.arb_poly_scalar_div(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly), poly, Real.getCPtr(numCols), numCols, prec);
  }

  public static void arb_poly_shift_left(RealPolynomial res, RealPolynomial poly, int n) {
    arblibJNI.arb_poly_shift_left(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly), poly, n);
  }

  public static void arb_poly_shift_right(RealPolynomial res, RealPolynomial poly, int n) {
    arblibJNI.arb_poly_shift_right(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly), poly, n);
  }

  public static void arb_poly_mul(RealPolynomial res, RealPolynomial poly1, RealPolynomial poly2, int prec) {
    arblibJNI.arb_poly_mul(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly1), poly1, RealPolynomial.getCPtr(poly2), poly2, prec);
  }

  public static void arb_poly_add(RealPolynomial res, RealPolynomial poly1, RealPolynomial poly2, int prec) {
    arblibJNI.arb_poly_add(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly1), poly1, RealPolynomial.getCPtr(poly2), poly2, prec);
  }

  public static void arb_poly_sub(RealPolynomial res, RealPolynomial poly1, RealPolynomial poly2, int prec) {
    arblibJNI.arb_poly_sub(RealPolynomial.getCPtr(res), res, RealPolynomial.getCPtr(poly1), poly1, RealPolynomial.getCPtr(poly2), poly2, prec);
  }

  public static void arb_poly_fit_length(RealPolynomial poly, int len) {
    arblibJNI.arb_poly_fit_length(RealPolynomial.getCPtr(poly), poly, len);
  }

  public static void acb_calc_gl_node(Real x, Real w, int i, int k, int prec) {
    arblibJNI.acb_calc_gl_node(Real.getCPtr(x), x, Real.getCPtr(w), w, i, k, prec);
  }

  public static void arb_ceil(Real z, Real x, int prec) {
    arblibJNI.arb_ceil(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void arb_mat_bound_frobenius_norm(Magnitude b, RealMatrix A) {
    arblibJNI.arb_mat_bound_frobenius_norm(Magnitude.getCPtr(b), b, RealMatrix.getCPtr(A), A);
  }

  public static void arb_mat_bound_inf_norm(Magnitude b, RealMatrix A) {
    arblibJNI.arb_mat_bound_inf_norm(Magnitude.getCPtr(b), b, RealMatrix.getCPtr(A), A);
  }

  public static void arb_mat_frobenius_norm(Real res, RealMatrix A, int prec) {
    arblibJNI.arb_mat_frobenius_norm(Real.getCPtr(res), res, RealMatrix.getCPtr(A), A, prec);
  }

  public static void arb_mat_swap_rows(RealMatrix mat, java.nio.LongBuffer perm, int numRows, int s) {
    arblibJNI.arb_mat_swap_rows(RealMatrix.getCPtr(mat), mat, perm, numRows, s);
  }

  public static void arb_mat_scalar_mul_arb(RealMatrix B, RealMatrix A, Real numCols, int prec) {
    arblibJNI.arb_mat_scalar_mul_arb(RealMatrix.getCPtr(B), B, RealMatrix.getCPtr(A), A, Real.getCPtr(numCols), numCols, prec);
  }

  public static int arb_mat_lu(java.nio.LongBuffer P, RealMatrix LU, RealMatrix A, int prec) {
    return arblibJNI.arb_mat_lu(P, RealMatrix.getCPtr(LU), LU, RealMatrix.getCPtr(A), A, prec);
  }

  public static void acb_dirichlet_lerch_phi(Complex res, Complex z, Complex s, Complex a, int prec) {
    arblibJNI.acb_dirichlet_lerch_phi(Complex.getCPtr(res), res, Complex.getCPtr(z), z, Complex.getCPtr(s), s, Complex.getCPtr(a), a, prec);
  }

  public static void arb_poly_product_roots(RealPolynomial poly, Real xs, int n, int prec) {
    arblibJNI.arb_poly_product_roots(RealPolynomial.getCPtr(poly), poly, Real.getCPtr(xs), xs, n, prec);
  }

  public static void arb_poly_clear(RealPolynomial poly) {
    arblibJNI.arb_poly_clear(RealPolynomial.getCPtr(poly), poly);
  }

  public static void arb_poly_evaluate2(Real y, Real z, RealPolynomial f, Real x, int prec) {
    arblibJNI.arb_poly_evaluate2(Real.getCPtr(y), y, Real.getCPtr(z), z, RealPolynomial.getCPtr(f), f, Real.getCPtr(x), x, prec);
  }

  public static void arb_poly_evaluate(Real res, RealPolynomial f, Real a, int prec) {
    arblibJNI.arb_poly_evaluate(Real.getCPtr(res), res, RealPolynomial.getCPtr(f), f, Real.getCPtr(a), a, prec);
  }

  public static void arb_poly_init(RealPolynomial poly) {
    arblibJNI.arb_poly_init(RealPolynomial.getCPtr(poly), poly);
  }

  public static void arb_poly_init2(RealPolynomial poly, int len) {
    arblibJNI.arb_poly_init2(RealPolynomial.getCPtr(poly), poly, len);
  }

  public static void arb_poly_swinnerton_dyer_ui(RealPolynomial poly, long n, int prec) {
    arblibJNI.arb_poly_swinnerton_dyer_ui(RealPolynomial.getCPtr(poly), poly, n, prec);
  }

  public static void arb_sec(Real res, Real x, int prec) {
    arblibJNI.arb_sec(Real.getCPtr(res), res, Real.getCPtr(x), x, prec);
  }

  public static void arb_csc(Real res, Real x, int prec) {
    arblibJNI.arb_csc(Real.getCPtr(res), res, Real.getCPtr(x), x, prec);
  }

  public static void arb_csc_pi(Real res, Real x, int prec) {
    arblibJNI.arb_csc_pi(Real.getCPtr(res), res, Real.getCPtr(x), x, prec);
  }

  public static void arb_sech(Real res, Real x, int prec) {
    arblibJNI.arb_sech(Real.getCPtr(res), res, Real.getCPtr(x), x, prec);
  }

  public static void arb_csch(Real res, Real x, int prec) {
    arblibJNI.arb_csch(Real.getCPtr(res), res, Real.getCPtr(x), x, prec);
  }

  public static void _arb_vec_set(Real res, Real vec, int len) {
    arblibJNI._arb_vec_set(Real.getCPtr(res), res, Real.getCPtr(vec), vec, len);
  }

  public static void acb_dft_convol(Complex w, Complex f, Complex g, int len, int prec) {
    arblibJNI.acb_dft_convol(Complex.getCPtr(w), w, Complex.getCPtr(f), f, Complex.getCPtr(g), g, len, prec);
  }

  public static void arb_mat_neg(RealMatrix dest, RealMatrix src) {
    arblibJNI.arb_mat_neg(RealMatrix.getCPtr(dest), dest, RealMatrix.getCPtr(src), src);
  }

  public static void arb_mat_add(RealMatrix res, RealMatrix mat1, RealMatrix mat2, int prec) {
    arblibJNI.arb_mat_add(RealMatrix.getCPtr(res), res, RealMatrix.getCPtr(mat1), mat1, RealMatrix.getCPtr(mat2), mat2, prec);
  }

  public static void arb_mat_sub(RealMatrix res, RealMatrix mat1, RealMatrix mat2, int prec) {
    arblibJNI.arb_mat_sub(RealMatrix.getCPtr(res), res, RealMatrix.getCPtr(mat1), mat1, RealMatrix.getCPtr(mat2), mat2, prec);
  }

  public static void arb_mat_mul(RealMatrix res, RealMatrix mat1, RealMatrix mat2, int prec) {
    arblibJNI.arb_mat_mul(RealMatrix.getCPtr(res), res, RealMatrix.getCPtr(mat1), mat1, RealMatrix.getCPtr(mat2), mat2, prec);
  }

  public static void arb_hypgeom_bessel_j(Real res, Real nu, Real z, int prec) {
    arblibJNI.arb_hypgeom_bessel_j(Real.getCPtr(res), res, Real.getCPtr(nu), nu, Real.getCPtr(z), z, prec);
  }

  public static int arb_is_exact(Real x) {
    return arblibJNI.arb_is_exact(Real.getCPtr(x), x);
  }

  public static int acb_is_exact(Complex z) {
    return arblibJNI.acb_is_exact(Complex.getCPtr(z), z);
  }

  public static int arb_eq(Real x, Real y) {
    return arblibJNI.arb_eq(Real.getCPtr(x), x, Real.getCPtr(y), y);
  }

  public static int arb_ne(Real x, Real y) {
    return arblibJNI.arb_ne(Real.getCPtr(x), x, Real.getCPtr(y), y);
  }

  public static int arb_lt(Real x, Real y) {
    return arblibJNI.arb_lt(Real.getCPtr(x), x, Real.getCPtr(y), y);
  }

  public static int arb_le(Real x, Real y) {
    return arblibJNI.arb_le(Real.getCPtr(x), x, Real.getCPtr(y), y);
  }

  public static int arb_gt(Real x, Real y) {
    return arblibJNI.arb_gt(Real.getCPtr(x), x, Real.getCPtr(y), y);
  }

  public static int arb_ge(Real x, Real y) {
    return arblibJNI.arb_ge(Real.getCPtr(x), x, Real.getCPtr(y), y);
  }

  public static void acb_hypgeom_legendre_p(Complex res, Complex n, Complex m, Complex z, int type, int prec) {
    arblibJNI.acb_hypgeom_legendre_p(Complex.getCPtr(res), res, Complex.getCPtr(n), n, Complex.getCPtr(m), m, Complex.getCPtr(z), z, type, prec);
  }

  public static void acb_hypgeom_legendre_q(Complex res, Complex n, Complex m, Complex z, int type, int prec) {
    arblibJNI.acb_hypgeom_legendre_q(Complex.getCPtr(res), res, Complex.getCPtr(n), n, Complex.getCPtr(m), m, Complex.getCPtr(z), z, type, prec);
  }

  public static void acb_hypgeom_legendre_p_uiui_rec(Complex res, long n, long m, Complex z, int prec) {
    arblibJNI.acb_hypgeom_legendre_p_uiui_rec(Complex.getCPtr(res), res, n, m, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_spherical_y(Complex res, int n, int m, Complex theta, Complex phi, int prec) {
    arblibJNI.acb_hypgeom_spherical_y(Complex.getCPtr(res), res, n, m, Complex.getCPtr(theta), theta, Complex.getCPtr(phi), phi, prec);
  }

  public static void arb_hypgeom_legendre_p(Real res, Real n, Real m, Real z, int type, int prec) {
    arblibJNI.arb_hypgeom_legendre_p(Real.getCPtr(res), res, Real.getCPtr(n), n, Real.getCPtr(m), m, Real.getCPtr(z), z, type, prec);
  }

  public static void arb_hypgeom_legendre_q(Real res, Real n, Real m, Real z, int type, int prec) {
    arblibJNI.arb_hypgeom_legendre_q(Real.getCPtr(res), res, Real.getCPtr(n), n, Real.getCPtr(m), m, Real.getCPtr(z), z, type, prec);
  }

  public static void arb_hypgeom_legendre_p_ui_deriv_bound(Magnitude dp, Magnitude dp2, long n, Real x, Real x2sub1) {
    arblibJNI.arb_hypgeom_legendre_p_ui_deriv_bound(Magnitude.getCPtr(dp), dp, Magnitude.getCPtr(dp2), dp2, n, Real.getCPtr(x), x, Real.getCPtr(x2sub1), x2sub1);
  }

  public static void arb_hypgeom_legendre_p_ui_zero(Real res, Real res_prime, long n, Real x, int K, int prec) {
    arblibJNI.arb_hypgeom_legendre_p_ui_zero(Real.getCPtr(res), res, Real.getCPtr(res_prime), res_prime, n, Real.getCPtr(x), x, K, prec);
  }

  public static void arb_hypgeom_legendre_p_ui_one(Real res, Real res_prime, long n, Real x, int K, int prec) {
    arblibJNI.arb_hypgeom_legendre_p_ui_one(Real.getCPtr(res), res, Real.getCPtr(res_prime), res_prime, n, Real.getCPtr(x), x, K, prec);
  }

  public static void arb_hypgeom_legendre_p_ui_asymp(Real res, Real res_prime, long n, Real x, int K, int prec) {
    arblibJNI.arb_hypgeom_legendre_p_ui_asymp(Real.getCPtr(res), res, Real.getCPtr(res_prime), res_prime, n, Real.getCPtr(x), x, K, prec);
  }

  public static void arb_hypgeom_legendre_p_ui(Real res, Real res_prime, long n, Real x, int prec) {
    arblibJNI.arb_hypgeom_legendre_p_ui(Real.getCPtr(res), res, Real.getCPtr(res_prime), res_prime, n, Real.getCPtr(x), x, prec);
  }

  public static void acb_hypgeom_bessel_j(Complex res, Complex nu, Complex z, int prec) {
    arblibJNI.acb_hypgeom_bessel_j(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, prec);
  }

  public static void arb_hypgeom_legendre_p_ui_root(Real res, Real weight, long n, long k, int prec) {
    arblibJNI.arb_hypgeom_legendre_p_ui_root(Real.getCPtr(res), res, Real.getCPtr(weight), weight, n, k, prec);
  }

  public static void acb_hypgeom_coulomb(Complex F, Complex G, Complex Hpos, Complex Hneg, Complex l, Complex eta, Complex z, int prec) {
    arblibJNI.acb_hypgeom_coulomb(Complex.getCPtr(F), F, Complex.getCPtr(G), G, Complex.getCPtr(Hpos), Hpos, Complex.getCPtr(Hneg), Hneg, Complex.getCPtr(l), l, Complex.getCPtr(eta), eta, Complex.getCPtr(z), z, prec);
  }

  public static void arb_add_si(Real z, Real x, int y, int prec) {
    arblibJNI.arb_add_si(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_sub_si(Real z, Real x, int y, int prec) {
    arblibJNI.arb_sub_si(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void acb_sub_arb(Complex z, Complex x, Real y, int prec) {
    arblibJNI.acb_sub_arb(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void acb_addmul(Complex z, Complex x, Complex y, int prec) {
    arblibJNI.acb_addmul(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Complex.getCPtr(y), y, prec);
  }

  public static void acb_addmul_ui(Complex z, Complex x, long y, int prec) {
    arblibJNI.acb_addmul_ui(Complex.getCPtr(z), z, Complex.getCPtr(x), x, y, prec);
  }

  public static void acb_addmul_si(Complex z, Complex x, int y, int prec) {
    arblibJNI.acb_addmul_si(Complex.getCPtr(z), z, Complex.getCPtr(x), x, y, prec);
  }

  public static void acb_addmul_fmpz(Complex z, Complex x, long y, int prec) {
    arblibJNI.acb_addmul_fmpz(Complex.getCPtr(z), z, Complex.getCPtr(x), x, y, prec);
  }

  public static void arb_addmul(Real z, Real x, Real y, int prec) {
    arblibJNI.arb_addmul(Real.getCPtr(z), z, Real.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void arb_addmul_arf(Real z, Real x, Float y, int prec) {
    arblibJNI.arb_addmul_arf(Real.getCPtr(z), z, Real.getCPtr(x), x, Float.getCPtr(y), y, prec);
  }

  public static void arb_addmul_si(Real z, Real x, int y, int prec) {
    arblibJNI.arb_addmul_si(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_addmul_ui(Real z, Real x, long y, int prec) {
    arblibJNI.arb_addmul_ui(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_addmul_fmpz(Real z, Real x, long y, int prec) {
    arblibJNI.arb_addmul_fmpz(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_submul(Real z, Real x, Real y, int prec) {
    arblibJNI.arb_submul(Real.getCPtr(z), z, Real.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void arb_submul_arf(Real z, Real x, Float y, int prec) {
    arblibJNI.arb_submul_arf(Real.getCPtr(z), z, Real.getCPtr(x), x, Float.getCPtr(y), y, prec);
  }

  public static void arb_submul_si(Real z, Real x, int y, int prec) {
    arblibJNI.arb_submul_si(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_submul_ui(Real z, Real x, long y, int prec) {
    arblibJNI.arb_submul_ui(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_submul_fmpz(Real z, Real x, long y, int prec) {
    arblibJNI.arb_submul_fmpz(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static long bufferAddress(java.lang.Object buffer) {
    return arblibJNI.bufferAddress(buffer);
  }

  public static void arf_abs(Float y, Float x) {
    arblibJNI.arf_abs(Float.getCPtr(y), y, Float.getCPtr(x), x);
  }

  public static void acb_lambertw_asymp(Complex res, Complex z, long k, int L, int M, int prec) {
    arblibJNI.acb_lambertw_asymp(Complex.getCPtr(res), res, Complex.getCPtr(z), z, k, L, M, prec);
  }

  public static int acb_lambertw_check_branch(Complex w, long k, int prec) {
    return arblibJNI.acb_lambertw_check_branch(Complex.getCPtr(w), w, k, prec);
  }

  public static void acb_lambertw_bound_deriv(Magnitude res, Complex z, Complex ez1, long k) {
    arblibJNI.acb_lambertw_bound_deriv(Magnitude.getCPtr(res), res, Complex.getCPtr(z), z, Complex.getCPtr(ez1), ez1, k);
  }

  public static void acb_lambertw(Complex res, Complex z, long k, int flags, int prec) {
    arblibJNI.acb_lambertw(Complex.getCPtr(res), res, Complex.getCPtr(z), z, k, flags, prec);
  }

  public static void arb_get_abs_ubound_arf(Float u, Real x, int prec) {
    arblibJNI.arb_get_abs_ubound_arf(Float.getCPtr(u), u, Real.getCPtr(x), x, prec);
  }

  public static void arb_get_abs_lbound_arf(Float u, Real x, int prec) {
    arblibJNI.arb_get_abs_lbound_arf(Float.getCPtr(u), u, Real.getCPtr(x), x, prec);
  }

  public static void arb_get_ubound_arf(Float u, Real x, int prec) {
    arblibJNI.arb_get_ubound_arf(Float.getCPtr(u), u, Real.getCPtr(x), x, prec);
  }

  public static void arb_get_lbound_arf(Float u, Real x, int prec) {
    arblibJNI.arb_get_lbound_arf(Float.getCPtr(u), u, Real.getCPtr(x), x, prec);
  }

  public static void arb_nonnegative_part(Real res, Real x) {
    arblibJNI.arb_nonnegative_part(Real.getCPtr(res), res, Real.getCPtr(x), x);
  }

  public static int arb_rel_error_bits(Real x) {
    return arblibJNI.arb_rel_error_bits(Real.getCPtr(x), x);
  }

  public static int arb_rel_accuracy_bits(Real x) {
    return arblibJNI.arb_rel_accuracy_bits(Real.getCPtr(x), x);
  }

  public static int arb_rel_one_accuracy_bits(Real x) {
    return arblibJNI.arb_rel_one_accuracy_bits(Real.getCPtr(x), x);
  }

  public static int arb_bits(Real x) {
    return arblibJNI.arb_bits(Real.getCPtr(x), x);
  }

  public static void _arb_vec_neg(Real B, Real A, int n) {
    arblibJNI._arb_vec_neg(Real.getCPtr(B), B, Real.getCPtr(A), A, n);
  }

  public static void _arb_vec_scalar_addmul(Real res, Real vec, int len, Real numCols, int prec) {
    arblibJNI._arb_vec_scalar_addmul(Real.getCPtr(res), res, Real.getCPtr(vec), vec, len, Real.getCPtr(numCols), numCols, prec);
  }

  public static void _arb_vec_sub(Real C, Real A, Real B, int n, int prec) {
    arblibJNI._arb_vec_sub(Real.getCPtr(C), C, Real.getCPtr(A), A, Real.getCPtr(B), B, n, prec);
  }

  public static void arb_mat_mul_entrywise(RealMatrix res, RealMatrix mat1, RealMatrix mat2, int prec) {
    arblibJNI.arb_mat_mul_entrywise(RealMatrix.getCPtr(res), res, RealMatrix.getCPtr(mat1), mat1, RealMatrix.getCPtr(mat2), mat2, prec);
  }

  public static void acb_submul(Complex z, Complex x, Complex y, int prec) {
    arblibJNI.acb_submul(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Complex.getCPtr(y), y, prec);
  }

  public static void arb_sinh(Real z, Real x, int prec) {
    arblibJNI.arb_sinh(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void arb_cosh(Real z, Real x, int prec) {
    arblibJNI.arb_cosh(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void arb_mat_det_lu(Real det, RealMatrix A, int prec) {
    arblibJNI.arb_mat_det_lu(Real.getCPtr(det), det, RealMatrix.getCPtr(A), A, prec);
  }

  public static void arb_mat_det_precond(Real det, RealMatrix A, int prec) {
    arblibJNI.arb_mat_det_precond(Real.getCPtr(det), det, RealMatrix.getCPtr(A), A, prec);
  }

  public static void arb_mat_det(Real det, RealMatrix A, int prec) {
    arblibJNI.arb_mat_det(Real.getCPtr(det), det, RealMatrix.getCPtr(A), A, prec);
  }

  public static int ftruncate(int fd, int length) {
    return arblibJNI.ftruncate(fd, length);
  }

  public static void acb_hypgeom_bessel_j_0f1(Complex res, Complex nu, Complex z, int prec) {
    arblibJNI.acb_hypgeom_bessel_j_0f1(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_bessel_j_asymp(Complex res, Complex nu, Complex z, int prec) {
    arblibJNI.acb_hypgeom_bessel_j_asymp(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_bessel_i_0f1(Complex res, Complex nu, Complex z, int scaled, int prec) {
    arblibJNI.acb_hypgeom_bessel_i_0f1(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, scaled, prec);
  }

  public static void acb_hypgeom_bessel_i_asymp(Complex res, Complex nu, Complex z, int scaled, int prec) {
    arblibJNI.acb_hypgeom_bessel_i_asymp(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, scaled, prec);
  }

  public static void acb_hypgeom_bessel_i(Complex res, Complex nu, Complex z, int prec) {
    arblibJNI.acb_hypgeom_bessel_i(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_bessel_i_scaled(Complex res, Complex nu, Complex z, int prec) {
    arblibJNI.acb_hypgeom_bessel_i_scaled(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_bessel_k_0f1(Complex res, Complex nu, Complex z, int scaled, int prec) {
    arblibJNI.acb_hypgeom_bessel_k_0f1(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, scaled, prec);
  }

  public static void acb_hypgeom_bessel_k_0f1_series(ComplexPolynomial res, ComplexPolynomial n, ComplexPolynomial z, int scaled, int len, int prec) {
    arblibJNI.acb_hypgeom_bessel_k_0f1_series(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(n), n, ComplexPolynomial.getCPtr(z), z, scaled, len, prec);
  }

  public static void acb_hypgeom_bessel_k_asymp(Complex res, Complex nu, Complex z, int scaled, int prec) {
    arblibJNI.acb_hypgeom_bessel_k_asymp(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, scaled, prec);
  }

  public static void acb_hypgeom_bessel_k(Complex res, Complex nu, Complex z, int prec) {
    arblibJNI.acb_hypgeom_bessel_k(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_bessel_k_scaled(Complex res, Complex nu, Complex z, int prec) {
    arblibJNI.acb_hypgeom_bessel_k_scaled(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_bessel_y(Complex res, Complex nu, Complex z, int prec) {
    arblibJNI.acb_hypgeom_bessel_y(Complex.getCPtr(res), res, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_bessel_jy(Complex res1, Complex res2, Complex nu, Complex z, int prec) {
    arblibJNI.acb_hypgeom_bessel_jy(Complex.getCPtr(res1), res1, Complex.getCPtr(res2), res2, Complex.getCPtr(nu), nu, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_beta_lower_series(ComplexPolynomial res, Complex a, Complex b, ComplexPolynomial z, int regularized, int n, int prec) {
    arblibJNI.acb_hypgeom_beta_lower_series(ComplexPolynomial.getCPtr(res), res, Complex.getCPtr(a), a, Complex.getCPtr(b), b, ComplexPolynomial.getCPtr(z), z, regularized, n, prec);
  }

  public static void acb_hypgeom_beta_lower(Complex res, Complex a, Complex b, Complex z, int regularized, int prec) {
    arblibJNI.acb_hypgeom_beta_lower(Complex.getCPtr(res), res, Complex.getCPtr(a), a, Complex.getCPtr(b), b, Complex.getCPtr(z), z, regularized, prec);
  }

  public static void acb_hypgeom_gamma_upper(Complex res, Complex s, Complex z, int regularized, int prec) {
    arblibJNI.acb_hypgeom_gamma_upper(Complex.getCPtr(res), res, Complex.getCPtr(s), s, Complex.getCPtr(z), z, regularized, prec);
  }

  public static void acb_hypgeom_gamma_lower(Complex res, Complex s, Complex z, int regularized, int prec) {
    arblibJNI.acb_hypgeom_gamma_lower(Complex.getCPtr(res), res, Complex.getCPtr(s), s, Complex.getCPtr(z), z, regularized, prec);
  }

  public static int arb_mat_overlaps(RealMatrix mat1, RealMatrix mat2) {
    return arblibJNI.arb_mat_overlaps(RealMatrix.getCPtr(mat1), mat1, RealMatrix.getCPtr(mat2), mat2);
  }

  public static int arb_mat_contains(RealMatrix mat1, RealMatrix mat2) {
    return arblibJNI.arb_mat_contains(RealMatrix.getCPtr(mat1), mat1, RealMatrix.getCPtr(mat2), mat2);
  }

  public static void arb_mat_set(RealMatrix dest, RealMatrix src) {
    arblibJNI.arb_mat_set(RealMatrix.getCPtr(dest), dest, RealMatrix.getCPtr(src), src);
  }

  public static int arb_mat_eq(RealMatrix mat1, RealMatrix mat2) {
    return arblibJNI.arb_mat_eq(RealMatrix.getCPtr(mat1), mat1, RealMatrix.getCPtr(mat2), mat2);
  }

  public static int arb_mat_ne(RealMatrix mat1, RealMatrix mat2) {
    return arblibJNI.arb_mat_ne(RealMatrix.getCPtr(mat1), mat1, RealMatrix.getCPtr(mat2), mat2);
  }

  public static void arb_mat_zero(RealMatrix mat) {
    arblibJNI.arb_mat_zero(RealMatrix.getCPtr(mat), mat);
  }

  public static void arb_mat_one(RealMatrix mat) {
    arblibJNI.arb_mat_one(RealMatrix.getCPtr(mat), mat);
  }

  public static void arb_mat_transpose(RealMatrix mat1, RealMatrix mat2) {
    arblibJNI.arb_mat_transpose(RealMatrix.getCPtr(mat1), mat1, RealMatrix.getCPtr(mat2), mat2);
  }

  public static void arb_mat_printd(RealMatrix mat, int digits) {
    arblibJNI.arb_mat_printd(RealMatrix.getCPtr(mat), mat, digits);
  }

  public static int arb_mat_inv(RealMatrix X, RealMatrix A, int prec) {
    return arblibJNI.arb_mat_inv(RealMatrix.getCPtr(X), X, RealMatrix.getCPtr(A), A, prec);
  }

  public static void fmpq_one(Fraction res) {
    arblibJNI.fmpq_one(Fraction.getCPtr(res), res);
  }

  public static int getpagesize() {
    return arblibJNI.getpagesize();
  }

  public static SWIGTYPE_p_void memalign(long alignment, long size) {
    long cPtr = arblibJNI.memalign(alignment, size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static int errorNumber() {
    return arblibJNI.errorNumber();
  }

  public static int mprotect(SWIGTYPE_p_void addr, long len, int prot) {
    return arblibJNI.mprotect(SWIGTYPE_p_void.getCPtr(addr), len, prot);
  }

  public static SWIGTYPE_p_void memset(SWIGTYPE_p_void s, int numCols, long n) {
    long cPtr = arblibJNI.memset(SWIGTYPE_p_void.getCPtr(s), numCols, n);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void arb_dot_simple(Real res, Real initial, int subtract, Real x, int xstep, Real y, int ystep, int len, int prec) {
    arblibJNI.arb_dot_simple(Real.getCPtr(res), res, Real.getCPtr(initial), initial, subtract, Real.getCPtr(x), x, xstep, Real.getCPtr(y), y, ystep, len, prec);
  }

  public static void arb_dot_precise(Real res, Real initial, int subtract, Real x, int xstep, Real y, int ystep, int len, int prec) {
    arblibJNI.arb_dot_precise(Real.getCPtr(res), res, Real.getCPtr(initial), initial, subtract, Real.getCPtr(x), x, xstep, Real.getCPtr(y), y, ystep, len, prec);
  }

  public static void arb_dot(Real res, Real initial, int subtract, Real x, int xstep, Real y, int ystep, int len, int prec) {
    arblibJNI.arb_dot(Real.getCPtr(res), res, Real.getCPtr(initial), initial, subtract, Real.getCPtr(x), x, xstep, Real.getCPtr(y), y, ystep, len, prec);
  }

  public static void arb_hypgeom_chebyshev_t(Real res, Real nu, Real z, int prec) {
    arblibJNI.arb_hypgeom_chebyshev_t(Real.getCPtr(res), res, Real.getCPtr(nu), nu, Real.getCPtr(z), z, prec);
  }

  public static void arb_hypgeom_chebyshev_u(Real res, Real nu, Real z, int prec) {
    arblibJNI.arb_hypgeom_chebyshev_u(Real.getCPtr(res), res, Real.getCPtr(nu), nu, Real.getCPtr(z), z, prec);
  }

  public static void arb_hypgeom_jacobi_p(Real res, Real n, Real a, Real b, Real z, int prec) {
    arblibJNI.arb_hypgeom_jacobi_p(Real.getCPtr(res), res, Real.getCPtr(n), n, Real.getCPtr(a), a, Real.getCPtr(b), b, Real.getCPtr(z), z, prec);
  }

  public static void arb_hypgeom_gegenbauer_c(Real res, Real n, Real m, Real z, int prec) {
    arblibJNI.arb_hypgeom_gegenbauer_c(Real.getCPtr(res), res, Real.getCPtr(n), n, Real.getCPtr(m), m, Real.getCPtr(z), z, prec);
  }

  public static void arb_hypgeom_laguerre_l(Real res, Real n, Real m, Real z, int prec) {
    arblibJNI.arb_hypgeom_laguerre_l(Real.getCPtr(res), res, Real.getCPtr(n), n, Real.getCPtr(m), m, Real.getCPtr(z), z, prec);
  }

  public static void arb_hypgeom_hermite_h(Real res, Real nu, Real z, int prec) {
    arblibJNI.arb_hypgeom_hermite_h(Real.getCPtr(res), res, Real.getCPtr(nu), nu, Real.getCPtr(z), z, prec);
  }

  public static void arb_hypgeom_legendre_p_ui_rec(Real res, Real res_prime, long n, Real x, int prec) {
    arblibJNI.arb_hypgeom_legendre_p_ui_rec(Real.getCPtr(res), res, Real.getCPtr(res_prime), res_prime, n, Real.getCPtr(x), x, prec);
  }

  public static void arb_hypgeom_central_bin_ui(Real res, long n, int prec) {
    arblibJNI.arb_hypgeom_central_bin_ui(Real.getCPtr(res), res, n, prec);
  }

  public static void arb_hypgeom_dilog(Real res, Real z, int prec) {
    arblibJNI.arb_hypgeom_dilog(Real.getCPtr(res), res, Real.getCPtr(z), z, prec);
  }

  public static void acb_dft_rad2_precomp(Complex w, Complex v, FastDFTRadix2Scheme t, int prec) {
    arblibJNI.acb_dft_rad2_precomp(Complex.getCPtr(w), w, Complex.getCPtr(v), v, FastDFTRadix2Scheme.getCPtr(t), t, prec);
  }

  public static void acb_dirichlet_xi(Complex res, Complex s, int prec) {
    arblibJNI.acb_dirichlet_xi(Complex.getCPtr(res), res, Complex.getCPtr(s), s, prec);
  }

  public static void arb_hypgeom_erfinv(Real res, Real z, int prec) {
    arblibJNI.arb_hypgeom_erfinv(Real.getCPtr(res), res, Real.getCPtr(z), z, prec);
  }

  public static void arb_hypgeom_erfcinv(Real res, Real z, int prec) {
    arblibJNI.arb_hypgeom_erfcinv(Real.getCPtr(res), res, Real.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_erf(Complex res, Complex z, int prec) {
    arblibJNI.acb_hypgeom_erf(Complex.getCPtr(res), res, Complex.getCPtr(z), z, prec);
  }

  public static void arb_hypgeom_erf(Real res, Real z, int prec) {
    arblibJNI.arb_hypgeom_erf(Real.getCPtr(res), res, Real.getCPtr(z), z, prec);
  }

  public static void arb_hypgeom_erfc(Real res, Real z, int prec) {
    arblibJNI.arb_hypgeom_erfc(Real.getCPtr(res), res, Real.getCPtr(z), z, prec);
  }

  public static void arb_hypgeom_m(Real res, Real a, Real b, Real z, int regularized, int prec) {
    arblibJNI.arb_hypgeom_m(Real.getCPtr(res), res, Real.getCPtr(a), a, Real.getCPtr(b), b, Real.getCPtr(z), z, regularized, prec);
  }

  public static int arf_div(Float z, Float x, Float y, int prec, int rnd) {
    return arblibJNI.arf_div(Float.getCPtr(z), z, Float.getCPtr(x), x, Float.getCPtr(y), y, prec, rnd);
  }

  public static void acb_hypgeom_hermite_h(Complex res, Complex n, Complex z, int prec) {
    arblibJNI.acb_hypgeom_hermite_h(Complex.getCPtr(res), res, Complex.getCPtr(n), n, Complex.getCPtr(z), z, prec);
  }

  public static void arb_log(Real z, Real x, int prec) {
    arblibJNI.arb_log(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void arb_exp(Real z, Real x, int prec) {
    arblibJNI.arb_exp(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void _acb_dirichlet_hardy_z_series(Complex res, Complex s, int slen, DirichletGroup G, DirichletCharacter chi, int len, int prec) {
    arblibJNI._acb_dirichlet_hardy_z_series(Complex.getCPtr(res), res, Complex.getCPtr(s), s, slen, DirichletGroup.getCPtr(G), G, DirichletCharacter.getCPtr(chi), chi, len, prec);
  }

  public static void acb_dirichlet_hardy_z_series(ComplexPolynomial res, ComplexPolynomial s, DirichletGroup G, DirichletCharacter chi, int len, int prec) {
    arblibJNI.acb_dirichlet_hardy_z_series(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(s), s, DirichletGroup.getCPtr(G), G, DirichletCharacter.getCPtr(chi), chi, len, prec);
  }

  public static void acb_dirichlet_hardy_z_zero(Real res, long n, int prec) {
    arblibJNI.acb_dirichlet_hardy_z_zero(Real.getCPtr(res), res, n, prec);
  }

  public static void acb_sinh(Complex y, Complex x, int prec) {
    arblibJNI.acb_sinh(Complex.getCPtr(y), y, Complex.getCPtr(x), x, prec);
  }

  public static void acb_elliptic_f(Complex res, Complex phi, Complex m, int times_pi, int prec) {
    arblibJNI.acb_elliptic_f(Complex.getCPtr(res), res, Complex.getCPtr(phi), phi, Complex.getCPtr(m), m, times_pi, prec);
  }

  public static void acb_sech(Complex numRows, Complex z, int prec) {
    arblibJNI.acb_sech(Complex.getCPtr(numRows), numRows, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_jacobi_p(Complex res, Complex n, Complex a, Complex b, Complex z, int prec) {
    arblibJNI.acb_hypgeom_jacobi_p(Complex.getCPtr(res), res, Complex.getCPtr(n), n, Complex.getCPtr(a), a, Complex.getCPtr(b), b, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_gegenbauer_c(Complex res, Complex n, Complex m, Complex z, int prec) {
    arblibJNI.acb_hypgeom_gegenbauer_c(Complex.getCPtr(res), res, Complex.getCPtr(n), n, Complex.getCPtr(m), m, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_laguerre_l(Complex res, Complex n, Complex m, Complex z, int prec) {
    arblibJNI.acb_hypgeom_laguerre_l(Complex.getCPtr(res), res, Complex.getCPtr(n), n, Complex.getCPtr(m), m, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_chebyshev_t(Complex res, Complex n, Complex z, int prec) {
    arblibJNI.acb_hypgeom_chebyshev_t(Complex.getCPtr(res), res, Complex.getCPtr(n), n, Complex.getCPtr(z), z, prec);
  }

  public static void acb_hypgeom_chebyshev_u(Complex res, Complex n, Complex z, int prec) {
    arblibJNI.acb_hypgeom_chebyshev_u(Complex.getCPtr(res), res, Complex.getCPtr(n), n, Complex.getCPtr(z), z, prec);
  }

  public static void acb_tan(Complex numRows, Complex z, int prec) {
    arblibJNI.acb_tan(Complex.getCPtr(numRows), numRows, Complex.getCPtr(z), z, prec);
  }

  public static void acb_sec(Complex y, Complex x, int prec) {
    arblibJNI.acb_sec(Complex.getCPtr(y), y, Complex.getCPtr(x), x, prec);
  }

  public static void arb_add_ui(Real z, Real x, long y, int prec) {
    arblibJNI.arb_add_ui(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_sub_ui(Real z, Real x, long y, int prec) {
    arblibJNI.arb_sub_ui(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void mag_div(Magnitude z, Magnitude x, Magnitude y) {
    arblibJNI.mag_div(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static void mag_log(Magnitude z, Magnitude x) {
    arblibJNI.mag_log(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x);
  }

  public static void mag_inv(Magnitude res, Magnitude x) {
    arblibJNI.mag_inv(Magnitude.getCPtr(res), res, Magnitude.getCPtr(x), x);
  }

  public static int arf_is_zero(Float x) {
    return arblibJNI.arf_is_zero(Float.getCPtr(x), x);
  }

  public static void acb_add_arb(Complex z, Complex x, Real y, int prec) {
    arblibJNI.acb_add_arb(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void arb_mul_ui(Real z, Real x, long y, int prec) {
    arblibJNI.arb_mul_ui(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_mul_si(Real z, Real x, long y, int prec) {
    arblibJNI.arb_mul_si__SWIG_0(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_mul_si(Real z, Real x, int y, int prec) {
    arblibJNI.arb_mul_si__SWIG_1(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void dirichlet_group_init(DirichletGroup G, long q) {
    arblibJNI.dirichlet_group_init(DirichletGroup.getCPtr(G), G, q);
  }

  public static void dirichlet_subgroup_init(DirichletGroup H, DirichletGroup G, long h) {
    arblibJNI.dirichlet_subgroup_init(DirichletGroup.getCPtr(H), H, DirichletGroup.getCPtr(G), G, h);
  }

  public static void dirichlet_group_clear(DirichletGroup G) {
    arblibJNI.dirichlet_group_clear(DirichletGroup.getCPtr(G), G);
  }

  public static void dirichlet_char_init(DirichletCharacter x, DirichletGroup G) {
    arblibJNI.dirichlet_char_init(DirichletCharacter.getCPtr(x), x, DirichletGroup.getCPtr(G), G);
  }

  public static void dirichlet_char_clear(DirichletCharacter x) {
    arblibJNI.dirichlet_char_clear(DirichletCharacter.getCPtr(x), x);
  }

  public static int arb_mat_cho(RealMatrix L, RealMatrix A, int prec) {
    return arblibJNI.arb_mat_cho(RealMatrix.getCPtr(L), L, RealMatrix.getCPtr(A), A, prec);
  }

  public static void arb_mat_solve_cho_precomp(RealMatrix X, RealMatrix L, RealMatrix B, int prec) {
    arblibJNI.arb_mat_solve_cho_precomp(RealMatrix.getCPtr(X), X, RealMatrix.getCPtr(L), L, RealMatrix.getCPtr(B), B, prec);
  }

  public static int arb_mat_spd_solve(RealMatrix X, RealMatrix A, RealMatrix B, int prec) {
    return arblibJNI.arb_mat_spd_solve(RealMatrix.getCPtr(X), X, RealMatrix.getCPtr(A), A, RealMatrix.getCPtr(B), B, prec);
  }

  public static void arb_mat_inv_cho_precomp(RealMatrix X, RealMatrix L, int prec) {
    arblibJNI.arb_mat_inv_cho_precomp(RealMatrix.getCPtr(X), X, RealMatrix.getCPtr(L), L, prec);
  }

  public static int arb_mat_spd_inv(RealMatrix X, RealMatrix A, int prec) {
    return arblibJNI.arb_mat_spd_inv(RealMatrix.getCPtr(X), X, RealMatrix.getCPtr(A), A, prec);
  }

  public static int arb_mat_ldl(RealMatrix res, RealMatrix A, int prec) {
    return arblibJNI.arb_mat_ldl(RealMatrix.getCPtr(res), res, RealMatrix.getCPtr(A), A, prec);
  }

  public static void arb_mat_solve_ldl_precomp(RealMatrix X, RealMatrix L, RealMatrix B, int prec) {
    arblibJNI.arb_mat_solve_ldl_precomp(RealMatrix.getCPtr(X), X, RealMatrix.getCPtr(L), L, RealMatrix.getCPtr(B), B, prec);
  }

  public static void arb_mat_inv_ldl_precomp(RealMatrix X, RealMatrix L, int prec) {
    arblibJNI.arb_mat_inv_ldl_precomp(RealMatrix.getCPtr(X), X, RealMatrix.getCPtr(L), L, prec);
  }

  public static void acb_mat_dft(ComplexMatrix mat, int type, int prec) {
    arblibJNI.acb_mat_dft(ComplexMatrix.getCPtr(mat), mat, type, prec);
  }

  public static int acb_mat_eig_multiple(Complex E, ComplexMatrix A, Complex E_approx, ComplexMatrix R_approx, int prec) {
    return arblibJNI.acb_mat_eig_multiple(Complex.getCPtr(E), E, ComplexMatrix.getCPtr(A), A, Complex.getCPtr(E_approx), E_approx, ComplexMatrix.getCPtr(R_approx), R_approx, prec);
  }

  public static void arb_mat_clear(RealMatrix mat) {
    arblibJNI.arb_mat_clear(RealMatrix.getCPtr(mat), mat);
  }

  public static void acb_mat_clear(ComplexMatrix mat) {
    arblibJNI.acb_mat_clear(ComplexMatrix.getCPtr(mat), mat);
  }

  public static void arb_mat_init(RealMatrix mat, int numRows, int numCols) {
    arblibJNI.arb_mat_init(RealMatrix.getCPtr(mat), mat, numRows, numCols);
  }

  public static void acb_poly_clear(ComplexPolynomial poly) {
    arblibJNI.acb_poly_clear(ComplexPolynomial.getCPtr(poly), poly);
  }

  public static Real arb_mat_entry_ptr(RealMatrix mat, int i, int j) {
    long cPtr = arblibJNI.arb_mat_entry_ptr(RealMatrix.getCPtr(mat), mat, i, j);
    return (cPtr == 0) ? null : new Real(cPtr, false);
  }

  public static void flint_cleanup() {
    arblibJNI.flint_cleanup();
  }

  public static void flint_cleanup_master() {
    arblibJNI.flint_cleanup_master();
  }

  public static int arf_cmp(Float x, Float y) {
    return arblibJNI.arf_cmp(Float.getCPtr(x), x, Float.getCPtr(y), y);
  }

  public static void acb_one(Complex z) {
    arblibJNI.acb_one(Complex.getCPtr(z), z);
  }

  public static int arb_is_zero(Real z) {
    return arblibJNI.arb_is_zero(Real.getCPtr(z), z);
  }

  public static int acb_is_zero(Complex z) {
    return arblibJNI.acb_is_zero(Complex.getCPtr(z), z);
  }

  public static void acb_div_si(Complex z, Complex x, int numCols, int prec) {
    arblibJNI.acb_div_si(Complex.getCPtr(z), z, Complex.getCPtr(x), x, numCols, prec);
  }

  public static void acb_neg(Complex z, Complex x) {
    arblibJNI.acb_neg(Complex.getCPtr(z), z, Complex.getCPtr(x), x);
  }

  public static int acb_equal(Complex x, Complex y) {
    return arblibJNI.acb_equal(Complex.getCPtr(x), x, Complex.getCPtr(y), y);
  }

  public static int arb_equal(Real x, Real y) {
    return arblibJNI.arb_equal(Real.getCPtr(x), x, Real.getCPtr(y), y);
  }

  public static void arb_set_si(Real x, int y) {
    arblibJNI.arb_set_si(Real.getCPtr(x), x, y);
  }

  public static void mag_set_d(Magnitude res, double x) {
    arblibJNI.mag_set_d(Magnitude.getCPtr(res), res, x);
  }

  public static void acb_dft_inverse_precomp(Complex w, Complex v, FastDFTScheme pre, int prec) {
    arblibJNI.acb_dft_inverse_precomp(Complex.getCPtr(w), w, Complex.getCPtr(v), v, FastDFTScheme.getCPtr(pre), pre, prec);
  }

  public static void acb_dft_precomp(Complex w, Complex v, FastDFTScheme pre, int prec) {
    arblibJNI.acb_dft_precomp(Complex.getCPtr(w), w, Complex.getCPtr(v), v, FastDFTScheme.getCPtr(pre), pre, prec);
  }

  public static void acb_dft_precomp_clear(FastDFTScheme pre) {
    arblibJNI.acb_dft_precomp_clear(FastDFTScheme.getCPtr(pre), pre);
  }

  public static void acb_dft_precomp_init(FastDFTScheme pre, int len, int prec) {
    arblibJNI.acb_dft_precomp_init(FastDFTScheme.getCPtr(pre), pre, len, prec);
  }

  public static void acb_dft_inverse(Complex w, Complex v, int n, int prec) {
    arblibJNI.acb_dft_inverse(Complex.getCPtr(w), w, Complex.getCPtr(v), v, n, prec);
  }

  public static void acb_dft(Complex w, Complex v, int n, int prec) {
    arblibJNI.acb_dft(Complex.getCPtr(w), w, Complex.getCPtr(v), v, n, prec);
  }

  public static int acb_is_real(Complex x) {
    return arblibJNI.acb_is_real(Complex.getCPtr(x), x);
  }

  public static void mag_swap(Magnitude x, Magnitude y) {
    arblibJNI.mag_swap(Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static void acb_swap(Complex z, Complex x) {
    arblibJNI.acb_swap(Complex.getCPtr(z), z, Complex.getCPtr(x), x);
  }

  public static void mag_max(Magnitude z, Magnitude x, Magnitude y) {
    arblibJNI.mag_max(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static void mag_mul_2exp_si(Magnitude z, Magnitude x, int y) {
    arblibJNI.mag_mul_2exp_si(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, y);
  }

  public static void acb_get_mag_lower(Magnitude z, Complex x) {
    arblibJNI.acb_get_mag_lower(Magnitude.getCPtr(z), z, Complex.getCPtr(x), x);
  }

  public static void arb_get_mag_lower(Magnitude z, Real x) {
    arblibJNI.arb_get_mag_lower(Magnitude.getCPtr(z), z, Real.getCPtr(x), x);
  }

  public static Magnitude _mag_vec_init(int n) {
    long cPtr = arblibJNI._mag_vec_init(n);
    return (cPtr == 0) ? null : new Magnitude(cPtr, false);
  }

  public static void arb_get_interval_arf(Float a, Float b, Real x, int prec) {
    arblibJNI.arb_get_interval_arf(Float.getCPtr(a), a, Float.getCPtr(b), b, Real.getCPtr(x), x, prec);
  }

  public static void arb_tan(Real y, Real x, int prec) {
    arblibJNI.arb_tan(Real.getCPtr(y), y, Real.getCPtr(x), x, prec);
  }

  public static void acb_inv(Complex res, Complex z, int prec) {
    arblibJNI.acb_inv(Complex.getCPtr(res), res, Complex.getCPtr(z), z, prec);
  }

  public static void arb_inv(Real z, Real x, int prec) {
    arblibJNI.arb_inv(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static int arb_allocated_bytes(Real x) {
    return arblibJNI.arb_allocated_bytes(Real.getCPtr(x), x);
  }

  public static void arf_set_mag(Float y, Magnitude x) {
    arblibJNI.arf_set_mag(Float.getCPtr(y), y, Magnitude.getCPtr(x), x);
  }

  public static void arf_mag_add_ulp(Magnitude z, Magnitude x, Float y, int prec) {
    arblibJNI.arf_mag_add_ulp(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, Float.getCPtr(y), y, prec);
  }

  public static void arb_printd(Real x, int digits) {
    arblibJNI.arb_printd(Real.getCPtr(x), x, digits);
  }

  public static int arf_is_pos_inf(Float x) {
    return arblibJNI.arf_is_pos_inf(Float.getCPtr(x), x);
  }

  public static int arf_is_neg_inf(Float x) {
    return arblibJNI.arf_is_neg_inf(Float.getCPtr(x), x);
  }

  public static int arf_sgn(Float x) {
    return arblibJNI.arf_sgn(Float.getCPtr(x), x);
  }

  public static int arf_is_nan(Float x) {
    return arblibJNI.arf_is_nan(Float.getCPtr(x), x);
  }

  public static int arf_equal(Float x, Float y) {
    return arblibJNI.arf_equal(Float.getCPtr(x), x, Float.getCPtr(y), y);
  }

  public static int arf_is_inf(Float x) {
    return arblibJNI.arf_is_inf(Float.getCPtr(x), x);
  }

  public static void arb_get_mag(Magnitude z, Real x) {
    arblibJNI.arb_get_mag(Magnitude.getCPtr(z), z, Real.getCPtr(x), x);
  }

  public static void mag_sub_lower(Magnitude z, Magnitude x, Magnitude y) {
    arblibJNI.mag_sub_lower(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static void arb_add_error_mag(Real x, Magnitude err) {
    arblibJNI.arb_add_error_mag(Real.getCPtr(x), x, Magnitude.getCPtr(err), err);
  }

  public static void arb_add_error_arf(Real x, Float err) {
    arblibJNI.arb_add_error_arf(Real.getCPtr(x), x, Float.getCPtr(err), err);
  }

  public static void arb_add_error_2exp_si(Real x, int err) {
    arblibJNI.arb_add_error_2exp_si(Real.getCPtr(x), x, err);
  }

  public static void arb_add_error_2exp_fmpz(Real x, long err) {
    arblibJNI.arb_add_error_2exp_fmpz(Real.getCPtr(x), x, err);
  }

  public static void arb_add_error(Real x, Real error) {
    arblibJNI.arb_add_error(Real.getCPtr(x), x, Real.getCPtr(error), error);
  }

  public static void arb_pow_si(Real res, Real x, int y, int prec) {
    arblibJNI.arb_pow_si(Real.getCPtr(res), res, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_add_error_ulp(Real x, int n) {
    arblibJNI.arb_add_error_ulp(Real.getCPtr(x), x, n);
  }

  public static void mag_mul_ui_lower(Magnitude z, Magnitude x, long y) {
    arblibJNI.mag_mul_ui_lower(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, y);
  }

  public static void mag_sub(Magnitude z, Magnitude x, Magnitude y) {
    arblibJNI.mag_sub(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static double mag_get_d(Magnitude z) {
    return arblibJNI.mag_get_d(Magnitude.getCPtr(z), z);
  }

  public static void acb_zero(Complex z) {
    arblibJNI.acb_zero(Complex.getCPtr(z), z);
  }

  public static void acb_sub(Complex z, Complex x, Complex y, int prec) {
    arblibJNI.acb_sub(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Complex.getCPtr(y), y, prec);
  }

  public static void acb_addmul_arb(Complex z, Complex x, Real y, int prec) {
    arblibJNI.acb_addmul_arb(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void mag_add_lower(Magnitude z, Magnitude x, Magnitude y) {
    arblibJNI.mag_add_lower(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static void mag_mul_lower(Magnitude z, Magnitude x, Magnitude y) {
    arblibJNI.mag_mul_lower(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static void acb_add_error_mag(Complex x, Magnitude err) {
    arblibJNI.acb_add_error_mag(Complex.getCPtr(x), x, Magnitude.getCPtr(err), err);
  }

  public static void arb_neg(Real y, Real x) {
    arblibJNI.arb_neg(Real.getCPtr(y), y, Real.getCPtr(x), x);
  }

  public static void arf_interval_swap(FloatInterval v, FloatInterval u) {
    arblibJNI.arf_interval_swap(FloatInterval.getCPtr(v), v, FloatInterval.getCPtr(u), u);
  }

  public static void arb_set_arf(Real x, Float y) {
    arblibJNI.arb_set_arf(Real.getCPtr(x), x, Float.getCPtr(y), y);
  }

  public static void mag_one(Magnitude x) {
    arblibJNI.mag_one(Magnitude.getCPtr(x), x);
  }

  public static void mag_clear(Magnitude x) {
    arblibJNI.mag_clear(Magnitude.getCPtr(x), x);
  }

  public static void mag_inf(Magnitude x) {
    arblibJNI.mag_inf(Magnitude.getCPtr(x), x);
  }

  public static void acb_mul_2exp_si(Complex z, Complex x, int e) {
    arblibJNI.acb_mul_2exp_si(Complex.getCPtr(z), z, Complex.getCPtr(x), x, e);
  }

  public static void acb_indeterminate(Complex x) {
    arblibJNI.acb_indeterminate(Complex.getCPtr(x), x);
  }

  public static void mag_sqrt(Magnitude y, Magnitude x) {
    arblibJNI.mag_sqrt(Magnitude.getCPtr(y), y, Magnitude.getCPtr(x), x);
  }

  public static void mag_sqrt_lower(Magnitude y, Magnitude x) {
    arblibJNI.mag_sqrt_lower(Magnitude.getCPtr(y), y, Magnitude.getCPtr(x), x);
  }

  public static void mag_rsqrt(Magnitude y, Magnitude x) {
    arblibJNI.mag_rsqrt(Magnitude.getCPtr(y), y, Magnitude.getCPtr(x), x);
  }

  public static void mag_rsqrt_lower(Magnitude y, Magnitude x) {
    arblibJNI.mag_rsqrt_lower(Magnitude.getCPtr(y), y, Magnitude.getCPtr(x), x);
  }

  public static void mag_root(Magnitude y, Magnitude x, long n) {
    arblibJNI.mag_root(Magnitude.getCPtr(y), y, Magnitude.getCPtr(x), x, n);
  }

  public static void mag_hypot(Magnitude z, Magnitude x, Magnitude y) {
    arblibJNI.mag_hypot(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static void mag_binpow_uiui(Magnitude b, long m, long n) {
    arblibJNI.mag_binpow_uiui(Magnitude.getCPtr(b), b, m, n);
  }

  public static void mag_polylog_tail(Magnitude u, Magnitude z, int sigma, long d, long N) {
    arblibJNI.mag_polylog_tail(Magnitude.getCPtr(u), u, Magnitude.getCPtr(z), z, sigma, d, N);
  }

  public static void mag_geom_series(Magnitude res, Magnitude x, long n) {
    arblibJNI.mag_geom_series(Magnitude.getCPtr(res), res, Magnitude.getCPtr(x), x, n);
  }

  public static void mag_hurwitz_zeta_uiui(Magnitude res, long s, long a) {
    arblibJNI.mag_hurwitz_zeta_uiui(Magnitude.getCPtr(res), res, s, a);
  }

  public static void mag_set_ui(Magnitude z, long x) {
    arblibJNI.mag_set_ui(Magnitude.getCPtr(z), z, x);
  }

  public static void mag_set_ui_lower(Magnitude z, long x) {
    arblibJNI.mag_set_ui_lower(Magnitude.getCPtr(z), z, x);
  }

  public static void mag_set(Magnitude x, Magnitude y) {
    arblibJNI.mag_set(Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static void mag_pow_ui_lower(Magnitude z, Magnitude x, long e) {
    arblibJNI.mag_pow_ui_lower(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, e);
  }

  public static void arf_mul_2exp_si(Float y, Float x, int e) {
    arblibJNI.arf_mul_2exp_si(Float.getCPtr(y), y, Float.getCPtr(x), x, e);
  }

  public static void arf_interval_set(FloatInterval v, FloatInterval u) {
    arblibJNI.arf_interval_set(FloatInterval.getCPtr(v), v, FloatInterval.getCPtr(u), u);
  }

  public static void arf_interval_get_arb(Real x, FloatInterval v, int prec) {
    arblibJNI.arf_interval_get_arb(Real.getCPtr(x), x, FloatInterval.getCPtr(v), v, prec);
  }

  public static int arb_sgn_nonzero(Real x) {
    return arblibJNI.arb_sgn_nonzero(Real.getCPtr(x), x);
  }

  public static void acb_poly_derivative(ComplexPolynomial res, ComplexPolynomial poly, int prec) {
    arblibJNI.acb_poly_derivative(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly), poly, prec);
  }

  public static void acb_poly_integral(ComplexPolynomial res, ComplexPolynomial poly, int prec) {
    arblibJNI.acb_poly_integral(ComplexPolynomial.getCPtr(res), res, ComplexPolynomial.getCPtr(poly), poly, prec);
  }

  public static void acb_poly_product_roots(ComplexPolynomial poly, Complex xs, int n, int prec) {
    arblibJNI.acb_poly_product_roots(ComplexPolynomial.getCPtr(poly), poly, Complex.getCPtr(xs), xs, n, prec);
  }

  public static void acb_poly_evaluate(Complex y, ComplexPolynomial f, Complex x, int prec) {
    arblibJNI.acb_poly_evaluate(Complex.getCPtr(y), y, ComplexPolynomial.getCPtr(f), f, Complex.getCPtr(x), x, prec);
  }

  public static void acb_poly_evaluate2(Complex y, Complex z, ComplexPolynomial f, Complex x, int prec) {
    arblibJNI.acb_poly_evaluate2(Complex.getCPtr(y), y, Complex.getCPtr(z), z, ComplexPolynomial.getCPtr(f), f, Complex.getCPtr(x), x, prec);
  }

  public static void flint_free(SWIGTYPE_p_void ptr) {
    arblibJNI.flint_free(SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static void acb_get_mag(Magnitude u, Complex z) {
    arblibJNI.acb_get_mag(Magnitude.getCPtr(u), u, Complex.getCPtr(z), z);
  }

  public static void acb_mat_init(ComplexMatrix mat, int numRows, int numCols) {
    arblibJNI.acb_mat_init(ComplexMatrix.getCPtr(mat), mat, numRows, numCols);
  }

  public static void acb_dot(Complex res, Complex initial, int subtract, Complex x, int xstep, Complex y, int ystep, int len, int prec) {
    arblibJNI.acb_dot(Complex.getCPtr(res), res, Complex.getCPtr(initial), initial, subtract, Complex.getCPtr(x), x, xstep, Complex.getCPtr(y), y, ystep, len, prec);
  }

  public static void acb_poly_interpolate_newton(ComplexPolynomial poly, Complex xs, Complex ys, int n, int prec) {
    arblibJNI.acb_poly_interpolate_newton(ComplexPolynomial.getCPtr(poly), poly, Complex.getCPtr(xs), xs, Complex.getCPtr(ys), ys, n, prec);
  }

  public static void arf_zero(Float x) {
    arblibJNI.arf_zero(Float.getCPtr(x), x);
  }

  public static void acb_cosh(Complex y, Complex x, int prec) {
    arblibJNI.acb_cosh(Complex.getCPtr(y), y, Complex.getCPtr(x), x, prec);
  }

  public static void arf_neg(Float y, Float x) {
    arblibJNI.arf_neg(Float.getCPtr(y), y, Float.getCPtr(x), x);
  }

  public static int arf_mul_si(Float z, Float x, int y, int prec, int rnd) {
    return arblibJNI.arf_mul_si(Float.getCPtr(z), z, Float.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_mul_rnd_any(Float z, Float x, Float y, int prec, int rnd) {
    return arblibJNI.arf_mul_rnd_any(Float.getCPtr(z), z, Float.getCPtr(x), x, Float.getCPtr(y), y, prec, rnd);
  }

  public static int arf_mul_rnd_down(Float z, Float x, Float y, int prec) {
    return arblibJNI.arf_mul_rnd_down(Float.getCPtr(z), z, Float.getCPtr(x), x, Float.getCPtr(y), y, prec);
  }

  public static SWIGTYPE_p_void flint_malloc(long size) {
    long cPtr = arblibJNI.flint_malloc(size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void flint_realloc(SWIGTYPE_p_void ptr, long size) {
    long cPtr = arblibJNI.flint_realloc(SWIGTYPE_p_void.getCPtr(ptr), size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_void flint_calloc(long numeratorAddress, long size) {
    long cPtr = arblibJNI.flint_calloc(numeratorAddress, size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static void acb_set_d(Complex z, double numCols) {
    arblibJNI.acb_set_d(Complex.getCPtr(z), z, numCols);
  }

  public static void acb_dirichlet_zeta_jet(Complex res, Complex s, int deflate, int len, int prec) {
    arblibJNI.acb_dirichlet_zeta_jet(Complex.getCPtr(res), res, Complex.getCPtr(s), s, deflate, len, prec);
  }

  public static void acb_dirichlet_hardy_z(Complex res, Complex t, DirichletGroup G, DirichletCharacter chi, int len, int prec) {
    arblibJNI.acb_dirichlet_hardy_z(Complex.getCPtr(res), res, Complex.getCPtr(t), t, DirichletGroup.getCPtr(G), G, DirichletCharacter.getCPtr(chi), chi, len, prec);
  }

  public static void acb_print(Complex x) {
    arblibJNI.acb_print(Complex.getCPtr(x), x);
  }

  public static String arb_get_str(Real x, int n, long flags) {
    return arblibJNI.arb_get_str(Real.getCPtr(x), x, n, flags);
  }

  public static String arf_get_str(Float x, int d) {
    return arblibJNI.arf_get_str(Float.getCPtr(x), x, d);
  }

  public static double arf_get_d(Float x, int rnd) {
    return arblibJNI.arf_get_d(Float.getCPtr(x), x, rnd);
  }

  public static void arf_set_d(Float x, double v) {
    arblibJNI.arf_set_d(Float.getCPtr(x), x, v);
  }

  public static int arf_sub(Float z, Float x, Float y, int prec, int rnd) {
    return arblibJNI.arf_sub(Float.getCPtr(z), z, Float.getCPtr(x), x, Float.getCPtr(y), y, prec, rnd);
  }

  public static void acb_conj(Complex z, Complex x) {
    arblibJNI.acb_conj(Complex.getCPtr(z), z, Complex.getCPtr(x), x);
  }

  public static void arb_floor(Real y, Real x, int prec) {
    arblibJNI.arb_floor(Real.getCPtr(y), y, Real.getCPtr(x), x, prec);
  }

  public static void arb_div(Real z, Real x, Real y, int prec) {
    arblibJNI.arb_div(Real.getCPtr(z), z, Real.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void arb_sin(Real s, Real x, int prec) {
    arblibJNI.arb_sin(Real.getCPtr(s), s, Real.getCPtr(x), x, prec);
  }

  public static void arb_cos(Real s, Real x, int prec) {
    arblibJNI.arb_cos(Real.getCPtr(s), s, Real.getCPtr(x), x, prec);
  }

  public static void arb_mul(Real z, Real x, Real y, int prec) {
    arblibJNI.arb_mul(Real.getCPtr(z), z, Real.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static int arf_abs_bound_lt_2exp_si(Float x) {
    return arblibJNI.arf_abs_bound_lt_2exp_si(Float.getCPtr(x), x);
  }

  public static void arb_mul_2exp_si(Real y, Real x, int e) {
    arblibJNI.arb_mul_2exp_si(Real.getCPtr(y), y, Real.getCPtr(x), x, e);
  }

  public static void acb_mul_si(Complex z, Complex x, int y, int prec) {
    arblibJNI.acb_mul_si(Complex.getCPtr(z), z, Complex.getCPtr(x), x, y, prec);
  }

  public static int arf_mul_ui(Float z, Float x, long y, int prec, int rnd) {
    return arblibJNI.arf_mul_ui(Float.getCPtr(z), z, Float.getCPtr(x), x, y, prec, rnd);
  }

  public static int arf_div_ui(Float z, Float x, long y, int prec, int rnd) {
    return arblibJNI.arf_div_ui(Float.getCPtr(z), z, Float.getCPtr(x), x, y, prec, rnd);
  }

  public static int mag_cmp(Magnitude x, Magnitude y) {
    return arblibJNI.mag_cmp(Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static void arb_swap(Real x, Real y) {
    arblibJNI.arb_swap(Real.getCPtr(x), x, Real.getCPtr(y), y);
  }

  public static void mag_init(Magnitude x) {
    arblibJNI.mag_init(Magnitude.getCPtr(x), x);
  }

  public static void mag_add(Magnitude z, Magnitude x, Magnitude y) {
    arblibJNI.mag_add(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static void arf_set(Float y, Float x) {
    arblibJNI.arf_set(Float.getCPtr(y), y, Float.getCPtr(x), x);
  }

  public static void mag_pow_ui(Magnitude res, Magnitude x, long e) {
    arblibJNI.mag_pow_ui(Magnitude.getCPtr(res), res, Magnitude.getCPtr(x), x, e);
  }

  public static void mag_mul(Magnitude z, Magnitude x, Magnitude y) {
    arblibJNI.mag_mul(Magnitude.getCPtr(z), z, Magnitude.getCPtr(x), x, Magnitude.getCPtr(y), y);
  }

  public static void arf_get_mag(Magnitude y, Float x) {
    arblibJNI.arf_get_mag(Magnitude.getCPtr(y), y, Float.getCPtr(x), x);
  }

  public static int arf_add(Float z, Float x, Float y, int prec, int rnd) {
    return arblibJNI.arf_add(Float.getCPtr(z), z, Float.getCPtr(x), x, Float.getCPtr(y), y, prec, rnd);
  }

  public static int acb_rel_accuracy_bits(Complex x) {
    return arblibJNI.acb_rel_accuracy_bits(Complex.getCPtr(x), x);
  }

  public static void acb_pow_ui(Complex y, Complex b, long e, int prec) {
    arblibJNI.acb_pow_ui(Complex.getCPtr(y), y, Complex.getCPtr(b), b, e, prec);
  }

  public static void acb_add_ui(Complex z, Complex x, long numCols, int prec) {
    arblibJNI.acb_add_ui(Complex.getCPtr(z), z, Complex.getCPtr(x), x, numCols, prec);
  }

  public static void acb_log(Complex numRows, Complex z, int prec) {
    arblibJNI.acb_log(Complex.getCPtr(numRows), numRows, Complex.getCPtr(z), z, prec);
  }

  public static void acb_tanh(Complex y, Complex x, int prec) {
    arblibJNI.acb_tanh(Complex.getCPtr(y), y, Complex.getCPtr(x), x, prec);
  }

  public static void arb_set_d(Real x, double y) {
    arblibJNI.arb_set_d(Real.getCPtr(x), x, y);
  }

  public static void acb_dirichlet_hurwitz(Complex res, Complex s, Complex a, int prec) {
    arblibJNI.acb_dirichlet_hurwitz(Complex.getCPtr(res), res, Complex.getCPtr(s), s, Complex.getCPtr(a), a, prec);
  }

  public static void acb_dirichlet_hardy_theta(Complex res, Complex t, DirichletGroup G, DirichletCharacter chi, int len, int prec) {
    arblibJNI.acb_dirichlet_hardy_theta(Complex.getCPtr(res), res, Complex.getCPtr(t), t, DirichletGroup.getCPtr(G), G, DirichletCharacter.getCPtr(chi), chi, len, prec);
  }

  public static void acb_mul(Complex z, Complex x, Complex y, int prec) {
    arblibJNI.acb_mul(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Complex.getCPtr(y), y, prec);
  }

  public static void acb_cos(Complex numRows, Complex z, int prec) {
    arblibJNI.acb_cos(Complex.getCPtr(numRows), numRows, Complex.getCPtr(z), z, prec);
  }

  public static void acb_sin(Complex numRows, Complex z, int prec) {
    arblibJNI.acb_sin(Complex.getCPtr(numRows), numRows, Complex.getCPtr(z), z, prec);
  }

  public static void acb_exp(Complex y, Complex z, int prec) {
    arblibJNI.acb_exp(Complex.getCPtr(y), y, Complex.getCPtr(z), z, prec);
  }

  public static void arb_add(Real z, Real x, Real y, int prec) {
    arblibJNI.arb_add(Real.getCPtr(z), z, Real.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void arb_sub(Real z, Real x, Real y, int prec) {
    arblibJNI.arb_sub(Real.getCPtr(z), z, Real.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void acb_arg(Real numRows, Complex z, int prec) {
    arblibJNI.acb_arg(Real.getCPtr(numRows), numRows, Complex.getCPtr(z), z, prec);
  }

  public static void acb_modular_eisenstein(Complex numRows, Complex tau, int len, int prec) {
    arblibJNI.acb_modular_eisenstein(Complex.getCPtr(numRows), numRows, Complex.getCPtr(tau), tau, len, prec);
  }

  public static void acb_pow_arb(Complex z, Complex x, Real y, int prec) {
    arblibJNI.acb_pow_arb(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void acb_pow(Complex z, Complex x, Complex y, int prec) {
    arblibJNI.acb_pow(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Complex.getCPtr(y), y, prec);
  }

  public static int arb_contains(Real x, Real y) {
    return arblibJNI.arb_contains(Real.getCPtr(x), x, Real.getCPtr(y), y);
  }

  public static int arb_set_str(Real res, String inp, int prec) {
    return arblibJNI.arb_set_str(Real.getCPtr(res), res, inp, prec);
  }

  public static int arb_overlaps(Real x, Real y) {
    return arblibJNI.arb_overlaps(Real.getCPtr(x), x, Real.getCPtr(y), y);
  }

  public static Complex _acb_vec_init(int n) {
    long cPtr = arblibJNI._acb_vec_init(n);
    return (cPtr == 0) ? null : new Complex(cPtr, false);
  }

  public static Real _arb_vec_init(int n) {
    long cPtr = arblibJNI._arb_vec_init(n);
    return (cPtr == 0) ? null : new Real(cPtr, false);
  }

  public static void _acb_vec_clear(Complex v, int n) {
    arblibJNI._acb_vec_clear(Complex.getCPtr(v), v, n);
  }

  public static void acb_mul_ui(Complex z, Complex x, long y, int prec) {
    arblibJNI.acb_mul_ui(Complex.getCPtr(z), z, Complex.getCPtr(x), x, y, prec);
  }

  public static void acb_set(Complex z, Complex x) {
    arblibJNI.acb_set(Complex.getCPtr(z), z, Complex.getCPtr(x), x);
  }

  public static void acb_clear(Complex x) {
    arblibJNI.acb_clear(Complex.getCPtr(x), x);
  }

  public static void arb_clear(Real x) {
    arblibJNI.arb_clear(Real.getCPtr(x), x);
  }

  public static void acb_add(Complex z, Complex x, Complex y, int prec) {
    arblibJNI.acb_add(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Complex.getCPtr(y), y, prec);
  }

  public static void acb_sub_ui(Complex z, Complex x, long y, int prec) {
    arblibJNI.acb_sub_ui(Complex.getCPtr(z), z, Complex.getCPtr(x), x, y, prec);
  }

  public static void acb_div(Complex z, Complex x, Complex y, int prec) {
    arblibJNI.acb_div(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Complex.getCPtr(y), y, prec);
  }

  public static void _arb_vec_clear(Real v, int n) {
    arblibJNI._arb_vec_clear(Real.getCPtr(v), v, n);
  }

  public static void acb_mul_onei(Complex z, Complex x) {
    arblibJNI.acb_mul_onei(Complex.getCPtr(z), z, Complex.getCPtr(x), x);
  }

  public static void acb_div_onei(Complex z, Complex x) {
    arblibJNI.acb_div_onei(Complex.getCPtr(z), z, Complex.getCPtr(x), x);
  }

  public static void arb_pow_ui(Real y, Real b, long e, int prec) {
    arblibJNI.arb_pow_ui(Real.getCPtr(y), y, Real.getCPtr(b), b, e, prec);
  }

  public static void arb_pow(Real z, Real x, Real y, int prec) {
    arblibJNI.arb_pow(Real.getCPtr(z), z, Real.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void acb_abs(Real numRows, Complex z, int prec) {
    arblibJNI.acb_abs(Real.getCPtr(numRows), numRows, Complex.getCPtr(z), z, prec);
  }

  public static void arb_sqrt(Real z, Real x, int prec) {
    arblibJNI.arb_sqrt(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void acb_sqr(Complex z, Complex x, int prec) {
    arblibJNI.acb_sqr(Complex.getCPtr(z), z, Complex.getCPtr(x), x, prec);
  }

  public static int acb_contains(Complex x, Complex y) {
    return arblibJNI.acb_contains(Complex.getCPtr(x), x, Complex.getCPtr(y), y);
  }

  public static int acb_overlaps(Complex x, Complex y) {
    return arblibJNI.acb_overlaps(Complex.getCPtr(x), x, Complex.getCPtr(y), y);
  }

  public static int acb_contains_zero(Complex x) {
    return arblibJNI.acb_contains_zero(Complex.getCPtr(x), x);
  }

  public static int acb_allocated_bytes(Complex x) {
    return arblibJNI.acb_allocated_bytes(Complex.getCPtr(x), x);
  }

  public static void acb_mul_arb(Complex z, Complex x, Real y, int prec) {
    arblibJNI.acb_mul_arb(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void acb_div_arb(Complex z, Complex x, Real y, int prec) {
    arblibJNI.acb_div_arb(Complex.getCPtr(z), z, Complex.getCPtr(x), x, Real.getCPtr(y), y, prec);
  }

  public static void arb_set(Real z, Real x) {
    arblibJNI.arb_set(Real.getCPtr(z), z, Real.getCPtr(x), x);
  }

  public static void acb_elliptic_k(Complex res, Complex m, int prec) {
    arblibJNI.acb_elliptic_k(Complex.getCPtr(res), res, Complex.getCPtr(m), m, prec);
  }

  public static int arb_get_unique_fmpz(long z, Real x) {
    return arblibJNI.arb_get_unique_fmpz(z, Real.getCPtr(x), x);
  }

  public static void acb_get_mid(Complex m, Complex x) {
    arblibJNI.acb_get_mid(Complex.getCPtr(m), m, Complex.getCPtr(x), x);
  }

  public static void arb_const_pi(Real z, int prec) {
    arblibJNI.arb_const_pi(Real.getCPtr(z), z, prec);
  }

  public static int arb_is_finite(Real z) {
    return arblibJNI.arb_is_finite(Real.getCPtr(z), z);
  }

  public static int acb_is_finite(Complex z) {
    return arblibJNI.acb_is_finite(Complex.getCPtr(z), z);
  }

  public static void arb_abs(Real y, Real x) {
    arblibJNI.arb_abs(Real.getCPtr(y), y, Real.getCPtr(x), x);
  }

  public static void arb_zero(Real x) {
    arblibJNI.arb_zero(Real.getCPtr(x), x);
  }

  public static void arb_one(Real f) {
    arblibJNI.arb_one(Real.getCPtr(f), f);
  }

  public static void arb_pos_inf(Real x) {
    arblibJNI.arb_pos_inf(Real.getCPtr(x), x);
  }

  public static void arb_neg_inf(Real x) {
    arblibJNI.arb_neg_inf(Real.getCPtr(x), x);
  }

  public static void arb_zero_pm_inf(Real x) {
    arblibJNI.arb_zero_pm_inf(Real.getCPtr(x), x);
  }

  public static void arb_indeterminate(Real x) {
    arblibJNI.arb_indeterminate(Real.getCPtr(x), x);
  }

  public static void arb_zero_pm_one(Real x) {
    arblibJNI.arb_zero_pm_one(Real.getCPtr(x), x);
  }

  public static void arb_unit_interval(Real x) {
    arblibJNI.arb_unit_interval(Real.getCPtr(x), x);
  }

  public static void mag_zero(Magnitude res) {
    arblibJNI.mag_zero(Magnitude.getCPtr(res), res);
  }

  public static void arb_div_si(Real z, Real x, int y, int prec) {
    arblibJNI.arb_div_si(Real.getCPtr(z), z, Real.getCPtr(x), x, y, prec);
  }

  public static void arb_trim(Real y, Real x) {
    arblibJNI.arb_trim(Real.getCPtr(y), y, Real.getCPtr(x), x);
  }

  public static void arb_bin_ui(Real z, Real n, long k, int prec) {
    arblibJNI.arb_bin_ui(Real.getCPtr(z), z, Real.getCPtr(n), n, k, prec);
  }

  public static void arb_bin_uiui(Real z, long n, long k, int prec) {
    arblibJNI.arb_bin_uiui(Real.getCPtr(z), z, n, k, prec);
  }

  public static void arb_set_interval_mag(Real x, Magnitude a, Magnitude b, int prec) {
    arblibJNI.arb_set_interval_mag(Real.getCPtr(x), x, Magnitude.getCPtr(a), a, Magnitude.getCPtr(b), b, prec);
  }

  public static void acb_modular_theta_series(ComplexPolynomial theta1, ComplexPolynomial theta2, ComplexPolynomial theta3, ComplexPolynomial theta4, ComplexPolynomial z, Complex tau, int len, int prec) {
    arblibJNI.acb_modular_theta_series(ComplexPolynomial.getCPtr(theta1), theta1, ComplexPolynomial.getCPtr(theta2), theta2, ComplexPolynomial.getCPtr(theta3), theta3, ComplexPolynomial.getCPtr(theta4), theta4, ComplexPolynomial.getCPtr(z), z, Complex.getCPtr(tau), tau, len, prec);
  }

  public static void acb_poly_init(ComplexPolynomial poly) {
    arblibJNI.acb_poly_init(ComplexPolynomial.getCPtr(poly), poly);
  }

  public static void arf_clear(Float x) {
    arblibJNI.arf_clear(Float.getCPtr(x), x);
  }

  public static void arb_init(Real x) {
    arblibJNI.arb_init(Real.getCPtr(x), x);
  }

  public static void arf_init(Float x) {
    arblibJNI.arf_init(Float.getCPtr(x), x);
  }

  public static void acb_init(Complex x) {
    arblibJNI.acb_init(Complex.getCPtr(x), x);
  }

  public static void arb_tanh(Real y, Real x, int prec) {
    arblibJNI.arb_tanh(Real.getCPtr(y), y, Real.getCPtr(x), x, prec);
  }

  public static void arb_asinh(Real z, Real x, int prec) {
    arblibJNI.arb_asinh(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void arb_acosh(Real z, Real x, int prec) {
    arblibJNI.arb_acosh(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void arb_lambertw(Real res, Real x, int flags, int prec) {
    arblibJNI.arb_lambertw(Real.getCPtr(res), res, Real.getCPtr(x), x, flags, prec);
  }

  public static void arb_gamma(Real z, Real x, int prec) {
    arblibJNI.arb_gamma(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void arb_lgamma(Real z, Real x, int prec) {
    arblibJNI.arb_lgamma(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void arb_sqr(Real y, Real x, int prec) {
    arblibJNI.arb_sqr(Real.getCPtr(y), y, Real.getCPtr(x), x, prec);
  }

  public static void acb_sqrt(Complex y, Complex x, int prec) {
    arblibJNI.acb_sqrt(Complex.getCPtr(y), y, Complex.getCPtr(x), x, prec);
  }

  public static void arb_atan(Real z, Real x, int prec) {
    arblibJNI.arb_atan(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void arb_atan2(Real z, Real b, Real a, int prec) {
    arblibJNI.arb_atan2(Real.getCPtr(z), z, Real.getCPtr(b), b, Real.getCPtr(a), a, prec);
  }

  public static void arb_asin(Real z, Real x, int prec) {
    arblibJNI.arb_asin(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void arb_acos(Real z, Real x, int prec) {
    arblibJNI.arb_acos(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

  public static void arb_atanh(Real z, Real x, int prec) {
    arblibJNI.arb_atanh(Real.getCPtr(z), z, Real.getCPtr(x), x, prec);
  }

}
