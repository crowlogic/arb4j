NEW: implement KL expansion
TODO: builtin sykbols for the classical orthogonal polynomials
"limit" is null at arb4j/arb.expressions.nodes.IntegralNode.evaluateIndefiniteIntegralAt(IntegralNode.java:217)
todo: mouse wheel zooms control or whole scene
expr compiler:  fractional derivatices
implement ∂/∂x[∏ᵢ₌₁ᵏfᵢ(x)] = ∑ᵢ₌₁ᵏ[(∂/∂x fᵢ(x))∏ⱼ₌₁,ⱼ≠ᵢᵏfⱼ(x)]
#550 Expression Compiler: improve nested function references by using 1 instance of each type of function instead of each function having its own instance versions of each function
#551 expr compiler: context variable loading prob
#549  Expression Compiler: implement switching of order-of-integration via Fubini's or Tonelli's theorem
#539  expression compiler: integration
#538  implement (abstract syntax) Expression tree simplification
#535 Uniformly convergent expansions for continuous positive definite functions
#531  Triangular eigenfunctions
#546  implement orthogonal function sequence expansion api
#518  expr compiler: Implement common subexpression elimination
#520  implement Gaussian Process modeller features
#261  Create Fractional Riccati Differential Equation Solver using Jacobi Tau Method
#253  expression compiler: automatic differentiation
java.lang.NullPointerException: Cannot load from object array because "this.rows" is nullat arb4j/arb.RealMatrix.getRow(RealMatrix.java:104)at arb4j/arb.RealMatrix.set(RealMatrix.java:68)at arb4j/arb.Integer.add(Integer.java:310)
find a good way to hande Integer.pow(Integer x) when x is negative or possibly negative without always assuming it is necessarily negative
ComplexFunctionSequence.express("Vplus:m->I*pFq([1,m,-m],[1/2],(I/2)/y)");
RealFunctionSequence.express("Vplus:m->pFq([1,m,-m],[1/2],(1/2)/y)");
#547 RationalFunction pointer consistency issue
java.lang.AssertionError: TODO: splice pFq([1,m,-m],[1/2];(1/2)/y) into class arb.expressions.Expression(hashcode=1042786867)at arb4j/arb.expressions.nodes.unary.HypergeometricFunctionNode.spliceInto(HypergeometricFunctionNode.java:63)at arb4j/arb.expressions.Expression.newFunctionalExpression(Expression.java:1137)at arb4j/arb.expressions.Expression.generateFunctionalElement(Expression.java:1039)at arb4j/arb.expressions.Expression.generateEvaluationMethod(Expression.java:1002)at arb4j/arb.expressions.Expression.generate(Expression.java:845)at arb4j/arb.expressions.Expression.defineClass(Expression.java:614)at arb4j/arb.expressions.Expression.getInstance(Expression.java:1336)at arb4j/arb.expressions.Expression.instantiate(Expression.java:1481)at arb4j/arb.functions.Function.instantiate(Function.java:128)at arb4j/arb.functions.Function.express(Function.java:91)at arb4j/arb.functions.integer.RealFunctionSequence.express(RealFunctionSequence.java:30)at arb4j/arb.functions.integer.RealFunctionSequence.express(RealFunctionSequence.java:25)at arb4j/arb.expressions.ExpressionTest.testRealSequenceOfHypergeometricFunctions(ExpressionTest.java:36)at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)at java.base/java.lang.reflect.Method.invoke(Method.java:580)at junit@4.13.2/junit.framework.TestCase.runTest(TestCase.java:177)at junit@4.13.2/junit.framework.TestCase.runBare(TestCase.java:142)at junit@4.13.2/junit.framework.TestResult$1.protect(TestResult.java:122)at junit@4.13.2/junit.framework.TestResult.runProtected(TestResult.java:142)at junit@4.13.2/junit.framework.TestResult.run(TestResult.java:125)at junit@4.13.2/junit.framework.TestCase.run(TestCase.java:130)at junit@4.13.2/junit.framework.TestSuite.runTest(TestSuite.java:241)at junit@4.13.2/junit.framework.TestSuite.run(TestSuite.java:236)at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:128)at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:40)at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:530)at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:758)at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:453)at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:211)
TODO: make Expressor have only a single global Context, that will make it * easier to cross-reference all functions within the global context to debug * sets of equations like is used in {@link JacobiPolynomials}
TODO: make Expressor have only a single global Context, that will make it * easier to cross-reference all functions within the global context to debug * sets of equations like is used in {@link JacobiPolynomials}
TODO: add say button to TODO
